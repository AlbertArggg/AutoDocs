<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Roslynator.Workspaces.Core</name>
    </assembly>
    <members>
        <member name="T:Roslynator.WorkspaceExtensions">
            <summary>
            A set of extension methods for the workspace layer.
            </summary>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.WithTextChangeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextChange,System.Threading.CancellationToken)">
            <summary>
            Creates a new document updated with the specified text change.
            </summary>
            <param name="document"></param>
            <param name="textChange"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.WithTextChangesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextChange[],System.Threading.CancellationToken)">
            <summary>
            Creates a new document updated with the specified text changes.
            </summary>
            <param name="document"></param>
            <param name="textChanges"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.WithTextChangesAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange},System.Threading.CancellationToken)">
            <summary>
            Creates a new document updated with the specified text changes.
            </summary>
            <param name="document"></param>
            <param name="textChanges"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceNodeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified old node replaced with a new node.
            </summary>
            <param name="document"></param>
            <param name="oldNode"></param>
            <param name="newNode"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceNodeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified old node replaced with new nodes.
            </summary>
            <param name="document"></param>
            <param name="oldNode"></param>
            <param name="newNodes"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceNodesAsync``1(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified old nodes replaced with new nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="document"></param>
            <param name="nodes"></param>
            <param name="computeReplacementNode"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceTokenAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified old token replaced with a new token.
            </summary>
            <param name="document"></param>
            <param name="oldToken"></param>
            <param name="newToken"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceTokenAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified old token replaced with new tokens.
            </summary>
            <param name="document"></param>
            <param name="oldToken"></param>
            <param name="newTokens"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceTriviaAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified old trivia replaced with a new trivia.
            </summary>
            <param name="document"></param>
            <param name="oldTrivia"></param>
            <param name="newTrivia"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceTriviaAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified old trivia replaced with a new trivia.
            </summary>
            <param name="document"></param>
            <param name="oldTrivia"></param>
            <param name="newTrivia"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.InsertNodeBeforeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with a new node inserted before the specified node.
            </summary>
            <param name="document"></param>
            <param name="nodeInList"></param>
            <param name="newNode"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.InsertNodesBeforeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with new nodes inserted before the specified node.
            </summary>
            <param name="document"></param>
            <param name="nodeInList"></param>
            <param name="newNodes"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.InsertNodeAfterAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with a new node inserted after the specified node.
            </summary>
            <param name="document"></param>
            <param name="nodeInList"></param>
            <param name="newNode"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.InsertNodesAfterAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with new nodes inserted after the specified node.
            </summary>
            <param name="document"></param>
            <param name="nodeInList"></param>
            <param name="newNodes"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.RemoveNodeAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified node removed.
            </summary>
            <param name="document"></param>
            <param name="node"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.RemoveNodesAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified nodes removed.
            </summary>
            <param name="document"></param>
            <param name="nodes"></param>
            <param name="options"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceNodeAsync``1(Microsoft.CodeAnalysis.Solution,``0,``0,System.Threading.CancellationToken)">
            <summary>
            Creates a new solution with the specified old node replaced with a new node.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="solution"></param>
            <param name="oldNode"></param>
            <param name="newNode"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.WorkspaceExtensions.ReplaceNodesAsync``1(Microsoft.CodeAnalysis.Solution,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,Microsoft.CodeAnalysis.SyntaxNode},System.Threading.CancellationToken)">
            <summary>
            Creates a new solution with the specified old nodes replaced with new nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="solution"></param>
            <param name="nodes"></param>
            <param name="computeReplacementNodes"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Roslynator.Rename.CompilationErrorResolution">
            <summary>
            Specifies how to handle compilation errors that occur after renaming a symbol.
            </summary>
        </member>
        <member name="F:Roslynator.Rename.CompilationErrorResolution.Ignore">
            <summary>
            Ignore compilation errors.
            </summary>
        </member>
        <member name="F:Roslynator.Rename.CompilationErrorResolution.Throw">
            <summary>
            Throw an exception if renaming of a symbol causes compilation errors.
            </summary>
        </member>
        <member name="F:Roslynator.Rename.CompilationErrorResolution.Skip">
            <summary>
            Skip renaming of a symbol if it causes compilation errors.
            </summary>
        </member>
        <member name="T:Roslynator.Rename.SymbolRenameProgress">
            <summary>
            Represents in information about renaming a symbol.
            </summary>
        </member>
        <member name="M:Roslynator.Rename.SymbolRenameProgress.#ctor(Microsoft.CodeAnalysis.ISymbol,System.String,Roslynator.Rename.SymbolRenameResult,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Roslynator.Rename.SymbolRenameProgress"/>.
            </summary>
            <param name="symbol"></param>
            <param name="newName"></param>
            <param name="result"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenameProgress.Symbol">
            <summary>
            Symbols being renamed.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenameProgress.NewName">
            <summary>
            New name of the symbol.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenameProgress.Result">
            <summary>
            /// Specifies if the rename operation succeeded or not.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenameProgress.Exception">
            <summary>
            Exception that occurred during renaming. May be <c>null</c>.
            </summary>
        </member>
        <member name="T:Roslynator.Rename.SymbolRenamer">
            <summary>
            Provides a set of static methods for renaming symbols in a solution or a project.
            </summary>
        </member>
        <member name="M:Roslynator.Rename.SymbolRenamer.RenameSymbolsAsync(Microsoft.CodeAnalysis.Solution,System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean},System.Func{Microsoft.CodeAnalysis.ISymbol,System.String},Roslynator.Rename.SymbolRenamerOptions,System.IProgress{Roslynator.Rename.SymbolRenameProgress},System.Threading.CancellationToken)">
            <summary>
            Renames symbols in the specified solution.
            </summary>
            <param name="solution"></param>
            <param name="predicate"></param>
            <param name="getNewName"></param>
            <param name="options"></param>
            <param name="progress"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.Rename.SymbolRenamer.RenameSymbolsAsync(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Project},System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean},System.Func{Microsoft.CodeAnalysis.ISymbol,System.String},Roslynator.Rename.SymbolRenamerOptions,System.IProgress{Roslynator.Rename.SymbolRenameProgress},System.Threading.CancellationToken)">
            <summary>
            Renames symbols in the specified projects. All projects must be in the same solution.
            </summary>
            <param name="projects"></param>
            <param name="predicate"></param>
            <param name="getNewName"></param>
            <param name="options"></param>
            <param name="progress"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Roslynator.Rename.SymbolRenamer.RenameSymbolsAsync(Microsoft.CodeAnalysis.Project,System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean},System.Func{Microsoft.CodeAnalysis.ISymbol,System.String},Roslynator.Rename.SymbolRenamerOptions,System.IProgress{Roslynator.Rename.SymbolRenameProgress},System.Threading.CancellationToken)">
            <summary>
            Renames symbols in the specified project.
            </summary>
            <param name="project"></param>
            <param name="predicate"></param>
            <param name="getNewName"></param>
            <param name="options"></param>
            <param name="progress"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Roslynator.Rename.SymbolRenameResult">
            <summary>
            Specifies the result of renaming a symbol.
            </summary>
        </member>
        <member name="F:Roslynator.Rename.SymbolRenameResult.Success">
            <summary>
            Symbol was renamed successfully.
            </summary>
        </member>
        <member name="F:Roslynator.Rename.SymbolRenameResult.Error">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.Rename.Renamer"/> throws an exception.
            </summary>
        </member>
        <member name="F:Roslynator.Rename.SymbolRenameResult.CompilationError">
            <summary>
            Renaming of a symbol caused compilation errors.
            </summary>
        </member>
        <member name="T:Roslynator.Rename.SymbolRenamerOptions">
            <summary>
            Represents options for <see cref="T:Roslynator.Rename.SymbolRenamer"/>.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.SkipTypes">
            <summary>
            Do not rename type symbols (classes, structs, interfaces etc.).
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.SkipMembers">
            <summary>
            Do not rename member symbols (methods, properties, fields etc.).
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.SkipLocals">
            <summary>
            Do not rename local symbols (like local variables).
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.IgnoredCompilerDiagnosticIds">
            <summary>
            A list of compiler diagnostic IDs that should be ignored.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.IncludeGeneratedCode">
            <summary>
            Include symbols that are part of generated code.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.DryRun">
            <summary>
            Do not save changes to disk.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.RenameOverloads">
            <summary>
            If the symbol is a method rename its overloads as well.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.RenameInStrings">
            <summary>
            Rename identifiers in string literals that match the name of the symbol.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.RenameInComments">
            <summary>
            Rename identifiers in comments that match the name of the symbol.
            </summary>
        </member>
        <member name="P:Roslynator.Rename.SymbolRenamerOptions.RenameFile">
            <summary>
            If the symbol is a type renames the file containing the type declaration as well.
            </summary>
        </member>
    </members>
</doc>
