<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Roslynator.CSharp</name>
    </assembly>
    <members>
        <member name="T:Roslynator.CSharp.CommentFilter">
            <summary>
            Specifies C# comments.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.CommentFilter.None">
            <summary>
            None comment specified.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.CommentFilter.SingleLine">
            <summary>
            Single-line comment.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.CommentFilter.MultiLine">
            <summary>
            Multi-line comment.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.CommentFilter.NonDocumentation">
            <summary>
            Non-documentation comment (single-line or multi-line).
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.CommentFilter.SingleLineDocumentation">
            <summary>
            Single-line documentation comment.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.CommentFilter.MultiLineDocumentation">
            <summary>
            Multi-line documentation comment.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.CommentFilter.Documentation">
            <summary>
            Documentation comment (single-line or multi-line).
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.CommentFilter.All">
            <summary>
            Documentation or non-documentation comment.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.CSharpFactory">
            <summary>
            A factory for syntax nodes, tokens and trivia. This class is built on top of <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxFactory"/> members.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFactory.TokenList(Microsoft.CodeAnalysis.Accessibility)">
            <summary>
            Creates a list of modifiers from the specified accessibility.
            </summary>
            <param name="accessibility"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is comment trivia.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.CanHaveStatements(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind can have statements. It can be either <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax"/> or <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax"/>.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.CanHaveMembers(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind can have members.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind if local function or anonymous function.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsIterationStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a for, foreach, while or do statement.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsBooleanLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is true or false literal expression.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsLambdaExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a lambda expression.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsAnonymousFunctionExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is an anonymous method or lambda expression.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsJumpStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a jump statement.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsIncrementOrDecrementExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is pre/post increment/decrement expression.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsCompoundAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a compound assignment expression.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.CanHaveModifiers(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind can have modifiers.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.CanHaveExpressionBody(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind can have expression body.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.CanHaveEmbeddedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind can have an embedded statement.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.CanBeEmbeddedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind can be an embedded statement.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsPredefinedType(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if a syntax of the specified kind is a predefined type.
            </summary>
            <param name="specialType"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsSimpleType(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if a syntax of the specified kind is a simple type.
            </summary>
            <param name="specialType"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsNumericType(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the specified type is a numeric type.
            </summary>
            <param name="specialType"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.SupportsPrefixOrPostfixUnaryOperator(Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if an expression of the specified type can be used in a prefix or postfix unary operator.
            </summary>
            <param name="specialType"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsSwitchLabel(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a switch label.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsBooleanExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a boolean expression.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a constraint.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a literal expression.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsIfElseDirective(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is #if, #else, #elif or #endif directive.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.IsStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a syntax of the specified kind is a statement (which includes <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.Block"/>).
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpFacts.CanBeVirtualDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a declaration of the specified type can have virtual, abstract or override modifier.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="T:Roslynator.CSharp.CSharpNameGenerator">
            <summary>
            Provides methods to obtain an unique C# identifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.CSharpNameGenerator.EnsureUniqueName(System.String,Microsoft.CodeAnalysis.SemanticModel,System.Int32)">
            <summary>
            Returns a name that will be unique at the specified position.
            </summary>
            <param name="baseName"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpNameGenerator.EnsureUniqueEnumMemberName(System.String,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Returns unique enum member name for a specified enum type.
            </summary>
            <param name="baseName"></param>
            <param name="enumType"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpNameGenerator.EnsureUniqueLocalName(System.String,Microsoft.CodeAnalysis.SemanticModel,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Return a local name that will be unique at the specified position.
            </summary>
            <param name="baseName"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpNameGenerator.EnsureUniqueLocalNames(System.String,Microsoft.CodeAnalysis.SemanticModel,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Return a local names that will be unique at the specified position.
            </summary>
            <param name="baseName"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="count"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpNameGenerator.EnsureUniqueParameterName(System.String,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Return a parameter name that will be unique at the specified position.
            </summary>
            <param name="baseName"></param>
            <param name="containingSymbol"></param>
            <param name="semanticModel"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Roslynator.CSharp.ExpressionChain">
            <summary>
            Enables to enumerate expressions of a binary expression and expressions of nested binary expressions of the same kind as parent binary expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.ExpressionChain.BinaryExpression">
            <summary>
            The binary expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.ExpressionChain.Span">
            <summary>
            The span that represents selected expressions.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.ExpressionChain.ExpressionsSpan">
            <summary>
            The absolute span of expressions in characters, not including its leading and trailing trivia.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.ExpressionChain.Reverse">
            <summary>
            Returns a chain which contains all expressions of <see cref="T:Roslynator.CSharp.ExpressionChain"/> in reversed order.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.ExpressionChain.GetEnumerator">
            <summary>
            Gets the enumerator for the expressions.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.ExpressionChain.ToString">
            <summary>
            Returns the string representation of the expressions, not including its leading and trailing trivia.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.ExpressionChain.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
        </member>
        <member name="M:Roslynator.CSharp.ExpressionChain.Equals(Roslynator.CSharp.ExpressionChain)">
            <summary>
            Determines whether this instance is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.CSharp.ExpressionChain.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Roslynator.CSharp.ExpressionChain.Reversed">
            <summary>
            Enables to enumerate expressions of <see cref="T:Roslynator.CSharp.ExpressionChain"/> in a reversed order.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.CSharpExtensions">
            <summary>
            A set of extension methods for a <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/>.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns a method symbol for the specified local function syntax.
            </summary>
            <param name="semanticModel"></param>
            <param name="localFunction"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns what symbol, if any, the specified attribute syntax bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="attribute"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns what symbol, if any, the specified constructor initializer syntax bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="constructorInitializer"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns what symbol, if any, the specified cref syntax bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="cref"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns what symbol, if any, the specified expression syntax bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns what symbol, if any, the specified ordering syntax bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="ordering"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns what symbol, if any, the specified select or group clause bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="selectOrGroupClause"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetTypeSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns type information about an attribute syntax.
            </summary>
            <param name="semanticModel"></param>
            <param name="attribute"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetTypeSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns type information about a constructor initializer syntax.
            </summary>
            <param name="semanticModel"></param>
            <param name="constructorInitializer"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetTypeSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns type information about an expression syntax.
            </summary>
            <param name="semanticModel"></param>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetTypeSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns type information about a select or group clause.
            </summary>
            <param name="semanticModel"></param>
            <param name="selectOrGroupClause"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.DetermineParameter(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Determines a parameter symbol that matches to the specified argument.
            Returns null if no matching parameter is found.
            </summary>
            <param name="semanticModel"></param>
            <param name="argument"></param>
            <param name="allowParams"></param>
            <param name="allowCandidate"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.DetermineParameter(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Determines a parameter symbol that matches to the specified attribute argument.
            Returns null if not matching parameter is found.
            </summary>
            <param name="semanticModel"></param>
            <param name="attributeArgument"></param>
            <param name="allowParams"></param>
            <param name="allowCandidate"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.IsDefaultValue(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns true if the specified expression represents default value of the specified type.
            </summary>
            <param name="semanticModel"></param>
            <param name="typeSymbol"></param>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetExtensionMethodInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns what extension method symbol, if any, the specified expression syntax bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetReducedExtensionMethodInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns what extension method symbol, if any, the specified expression syntax bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.GetMethodSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns method symbol, if any, the specified expression syntax bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.CSharpExtensions.HasConstantValue(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns true if the specified node has a constant value.
            </summary>
            <param name="semanticModel"></param>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Roslynator.CSharp.EnumExtensions">
            <summary>
            A set of extension methods for enumerations.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.EnumExtensions.Is(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if the kind is one of the specified kinds.
            </summary>
            <param name="kind"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
        </member>
        <member name="M:Roslynator.CSharp.EnumExtensions.Is(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if the kind is one of the specified kinds.
            </summary>
            <param name="kind"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
        </member>
        <member name="M:Roslynator.CSharp.EnumExtensions.Is(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if the kind is one of the specified kinds.
            </summary>
            <param name="kind"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
        </member>
        <member name="M:Roslynator.CSharp.EnumExtensions.Is(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if the kind is one of the specified kinds.
            </summary>
            <param name="kind"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
        </member>
        <member name="T:Roslynator.CSharp.SymbolExtensions">
            <summary>
            A set of static methods for <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> and derived types.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.SymbolExtensions.ToTypeSyntax(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax"/> based on the specified namespace or type symbol.
            </summary>
            <param name="namespaceOrTypeSymbol"></param>
            <param name="format"></param>
        </member>
        <member name="M:Roslynator.CSharp.SymbolExtensions.ToMinimalTypeSyntax(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax"/> based on the specified namespace or type symbol
            </summary>
            <param name="namespaceOrTypeSymbol"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="format"></param>
        </member>
        <member name="M:Roslynator.CSharp.SymbolExtensions.ToTypeSyntax(Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax"/> based on the specified namespace symbol.
            </summary>
            <param name="namespaceSymbol"></param>
            <param name="format"></param>
        </member>
        <member name="M:Roslynator.CSharp.SymbolExtensions.ToMinimalTypeSyntax(Microsoft.CodeAnalysis.INamespaceSymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax"/> based on the specified namespace symbol.
            </summary>
            <param name="namespaceSymbol"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="format"></param>
        </member>
        <member name="M:Roslynator.CSharp.SymbolExtensions.ToTypeSyntax(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax"/> based on the specified type symbol.
            </summary>
            <param name="typeSymbol"></param>
            <param name="format"></param>
        </member>
        <member name="M:Roslynator.CSharp.SymbolExtensions.ToMinimalTypeSyntax(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax"/> based on the specified type symbol.
            </summary>
            <param name="typeSymbol"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="format"></param>
        </member>
        <member name="M:Roslynator.CSharp.SymbolExtensions.SupportsConstantValue(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the specified type can be used to declare constant value.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="T:Roslynator.CSharp.SyntaxExtensions">
            <summary>
            A set of extension methods for syntax (types derived from <see cref="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode"/>).
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsAutoImplemented(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)">
            <summary>
            Returns true is the specified accessor is auto-implemented accessor.
            </summary>
            <param name="accessorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BodyOrExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)">
            <summary>
            Returns accessor body or an expression body if the body is null.
            </summary>
            <param name="accessorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Getter(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)">
            <summary>
            Returns a get accessor contained in the specified list.
            </summary>
            <param name="accessorList"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Setter(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)">
            <summary>
            Returns a set accessor contained in the specified list.
            </summary>
            <param name="accessorList"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.AsChain(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Returns <see cref="T:Roslynator.CSharp.ExpressionChain"/> that enables to enumerate expressions of a binary expression.
            </summary>
            <param name="binaryExpression"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ParenthesesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax)">
            <summary>
            The absolute span of the parentheses, not including its leading and trailing trivia.
            </summary>
            <param name="castExpression"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="classDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="classDeclaration"></param>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BracesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            The absolute span of the braces, not including its leading and trailing trivia.
            </summary>
            <param name="classDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ParenthesesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax)">
            <summary>
            The absolute span of the parentheses, not including its leading and trailing trivia.
            </summary>
            <param name="forEachStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> with the members updated.
            </summary>
            <param name="compilationUnit"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> with the members updated.
            </summary>
            <param name="compilationUnit"></param>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.AddUsings(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax,System.Boolean,Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax[])">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> with the specified using directives added.
            </summary>
            <param name="compilationUnit"></param>
            <param name="keepSingleLineCommentsOnTop"></param>
            <param name="usings"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BodyOrExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)">
            <summary>
            Returns constructor body or an expression body if the body is null.
            </summary>
            <param name="constructorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BodyOrExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax)">
            <summary>
            Returns conversion operator body or an expression body if the body is null.
            </summary>
            <param name="conversionOperatorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReturnsVoid(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)">
            <summary>
            Returns true the specified delegate return type is <see cref="T:System.Void"/>.
            </summary>
            <param name="delegateDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BodyOrExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)">
            <summary>
            Returns destructor body or an expression body if the body is null.
            </summary>
            <param name="destructorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetNextRelatedDirective(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax)">
            <summary>
            Returns the next related directive.
            </summary>
            <param name="directiveTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Elements(Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax,System.String)">
            <summary>
            Gets a list of xml elements with the specified local name.
            </summary>
            <param name="documentationComment"></param>
            <param name="localName"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetTopmostIf(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)">
            <summary>
            Returns topmost if statement of the if-else cascade the specified else clause is part of.
            </summary>
            <param name="elseClause"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetRegionDirective(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)">
            <summary>
            Returns region directive that is related to the specified endregion directive. Returns null if no matching region directive is found.
            </summary>
            <param name="endRegionDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetPreprocessingMessageTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)">
            <summary>
            Gets preprocessing message for the specified endregion directive if such message exists.
            </summary>
            <param name="endRegionDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.HasPreprocessingMessageTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)">
            <summary>
            Returns true the specified endregion directive has preprocessing message trivia.
            </summary>
            <param name="endRegionDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BracesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax)">
            <summary>
            The absolute span of the braces, not including its leading and trailing trivia.
            </summary>
            <param name="enumDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WalkUpParentheses(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Returns topmost parenthesized expression or self if the expression if not parenthesized.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WalkDownParentheses(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Returns lowest expression in parentheses or self if the expression is not parenthesized.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ParenthesesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax)">
            <summary>
            Absolute span of the parentheses, not including the leading and trailing trivia.
            </summary>
            <param name="forStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsSimpleIf(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)">
            <summary>
            Returns true if the specified if statement is a simple if statement.
            Simple if statement is defined as follows: it is not a child of an else clause and it has no else clause.
            </summary>
            <param name="ifStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetTopmostIf(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)">
            <summary>
            Returns topmost if statement of the if-else cascade the specified if statement is part of.
            </summary>
            <param name="ifStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsTopmostIf(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)">
            <summary>
            Returns true if the specified if statement is not a child of an else clause.
            </summary>
            <param name="ifStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.AsCascade(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)">
            <summary>
            Returns <see cref="T:Roslynator.CSharp.IfStatementCascade"/> that enables to enumerate if-else cascade.
            </summary>
            <param name="ifStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetCascadeInfo(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)">
            <summary>
            Returns <see cref="T:Roslynator.CSharp.IfStatementCascadeInfo"/> that summarizes information about if-else cascade.
            </summary>
            <param name="ifStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ToSyntaxList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a list of syntax nodes from a sequence of nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="nodes"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ToSeparatedSyntaxList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a separated list of syntax nodes from a sequence of nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="nodes"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ToSeparatedSyntaxList``1(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})">
            <summary>
            Creates a separated list of syntax nodes from a sequence of nodes and tokens.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="nodesAndTokens"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ToSyntaxTokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})">
            <summary>
            Creates a list of syntax tokens from a sequence of tokens.
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Getter(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)">
            <summary>
            Returns a get accessor that is contained in the specified indexer declaration.
            </summary>
            <param name="indexerDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Setter(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)">
            <summary>
            Returns a set accessor that is contained in the specified indexer declaration.
            </summary>
            <param name="indexerDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BracesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            The absolute span of the braces, not including it leading and trailing trivia.
            </summary>
            <param name="interfaceDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="interfaceDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="interfaceDeclaration"></param>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsVerbatim(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax)">
            <summary>
            Returns true if the specified interpolated string is a verbatim.
            </summary>
            <param name="interpolatedString"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsHexNumericLiteral(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)">
            <summary>
            Returns true if the specified literal expression is a hexadecimal numeric literal expression.
            </summary>
            <param name="literalExpression"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BodyOrExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)">
            <summary>
            Returns local function body or an expression body if the body is null.
            </summary>
            <param name="localFunctionStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReturnsVoid(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)">
            <summary>
            Returns true if the specified local function' return type is <see cref="T:System.Void"/>.
            </summary>
            <param name="localFunctionStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsYield(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)">
            <summary>
            Returns true if the specified local function contains yield statement. Nested local functions are excluded.
            </summary>
            <param name="localFunctionStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetSingleLineDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Returns single-line documentation comment that is part of the specified declaration.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Returns documentation comment that is part of the specified declaration.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetSingleLineDocumentationComment(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Returns single-line documentation comment syntax that is part of the specified declaration.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetDocumentationComment(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Returns documentation comment syntax that is part of the specified declaration.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.HasSingleLineDocumentationComment(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Returns true if the specified declaration has a single-line documentation comment.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.HasDocumentationComment(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Returns true if the specified declaration has a documentation comment.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsYield(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary>
            Returns true if the specified method contains yield statement. Nested local functions are excluded.
            </summary>
            <param name="methodDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReturnsVoid(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary>
            Returns true if the specified method return type is <see cref="T:System.Void"/>.
            </summary>
            <param name="methodDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BodyOrExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary>
            Returns method body or an expression body if the body is null.
            </summary>
            <param name="methodDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="namespaceDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="namespaceDeclaration"></param>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BracesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)">
            <summary>
            The absolute span of the braces, not including leading and trailing trivia.
            </summary>
            <param name="namespaceDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BodyOrExpressionBody(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax)">
            <summary>
            Returns operator body or an expression body if the body is null.
            </summary>
            <param name="operatorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParams(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)">
            <summary>
            Returns true if the specified parameter has "params" modifier.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Getter(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            Returns property get accessor, if any.
            </summary>
            <param name="propertyDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Setter(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            Returns property set accessor, if any.
            </summary>
            <param name="propertyDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="recordDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="recordDeclaration"></param>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BracesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax)">
            <summary>
            The absolute span of the braces, not including its leading and trailing trivia.
            </summary>
            <param name="recordDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetEndRegionDirective(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)">
            <summary>
            Returns endregion directive that is related to the specified region directive. Returns null if no matching endregion directive is found.
            </summary>
            <param name="regionDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetPreprocessingMessageTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)">
            <summary>
            Gets preprocessing message for the specified region directive if such message exists.
            </summary>
            <param name="regionDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.HasPreprocessingMessageTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)">
            <summary>
            Returns true the specified region directive has preprocessing message trivia.
            </summary>
            <param name="regionDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.LastIndexOf``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Searches for a node of the specified kind and returns the zero-based index of the last occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Contains``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Searches for a node of the specified kind and returns the zero-based index of the first occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Find``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Searches for a node of the specified kind and returns the first occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReplaceRange``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Int32,System.Int32,``0)">
            <summary>
            Creates a new list with the elements in the specified range replaced with new node.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="newNode"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReplaceRange``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new list with the elements in the specified range replaced with new nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="newNodes"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.RemoveRange``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Int32,System.Int32)">
            <summary>
            Creates a new list with elements in the specified range removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="index">An index of the first element to remove.</param>
            <param name="count">A number of elements to remove.</param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TrimTrivia``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0})">
            <summary>
            Removes all leading whitespace from the leading trivia of the first node in a list
            and all trailing whitespace from the trailing trivia of the last node in a list and returns a new list with the new trivia.
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> and <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/> is considered to be a whitespace.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.PreviousStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Gets the previous statement of the specified statement.
            If the specified statement is not contained in the list, or if there is no previous statement, then this method returns null.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.NextStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Gets the next statement of the specified statement.
            If the specified statement is not contained in the list, or if there is no next statement, then this method returns null.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TryGetContainingList(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax}@)">
            <summary>
            Gets a list the specified statement is contained in.
            This method succeeds if the statement is in a block's statements or a switch section's statements.
            </summary>
            <param name="statement"></param>
            <param name="statements"></param>
            <returns>True if the statement is contained in the list; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsEmbedded(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the specified statement is an embedded statement.
            </summary>
            <param name="statement"></param>
            <param name="canBeBlock">Block can be considered as embedded statement</param>
            <param name="canBeIfInsideElse">If statement that is a child of an else statement can be considered as an embedded statement.</param>
            <param name="canBeUsingInsideUsing">Using statement that is a child of an using statement can be considered as en embedded statement.</param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="structDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.WithMembers(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax"/> with the members updated.
            </summary>
            <param name="structDeclaration"></param>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.BracesSpan(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)">
            <summary>
            The absolute span of the braces, not including its leading and trailing trivia.
            </summary>
            <param name="structDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsDefaultLabel(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax)">
            <summary>
            Returns true if the specified switch section contains default switch label.
            </summary>
            <param name="switchSection"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.DefaultSection(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax)">
            <summary>
            Returns a section that contains default label, or null if the specified switch statement does not contains section with default label.
            </summary>
            <param name="switchStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.LastIndexOf``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Searches for a node of the specified kind and returns the zero-based index of the last occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Contains``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node of the specified kind is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Find``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Searches for a node of the specified kind and returns the first occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsLast(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Boolean)">
            <summary>
            Returns true if the specified statement is a last statement in the list.
            </summary>
            <param name="statements"></param>
            <param name="statement"></param>
            <param name="ignoreLocalFunctions">Ignore local function statements at the end of the list.</param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Add(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Boolean)">
            <summary>
            Creates a new list with the specified node added or inserted.
            </summary>
            <param name="statements"></param>
            <param name="statement"></param>
            <param name="ignoreLocalFunctions">Insert statement before local function statements at the end of the list.</param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReplaceRange``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Int32,System.Int32,``0)">
            <summary>
            Creates a new list with the elements in the specified range replaced with new node.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="newNode"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReplaceRange``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new list with the elements in the specified range replaced with new nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="newNodes"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.RemoveRange``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Int32,System.Int32)">
            <summary>
            Creates a new list with elements in the specified range removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="index">An index of the first element to remove.</param>
            <param name="count">A number of elements to remove.</param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TrimTrivia``1(Microsoft.CodeAnalysis.SyntaxList{``0})">
            <summary>
            Removes all leading whitespace from the leading trivia of the first node in a list
            and all trailing whitespace from the trailing trivia of the last node in a list and returns a new list with the new trivia.
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> and <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/> is considered to be a whitespace.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsDescendantOf(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean)">
            <summary>
            Returns true if a node is a descendant of a node with the specified kind.
            </summary>
            <param name="node"></param>
            <param name="kind"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
            <param name="kind6"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node parent's kind is the specified kind.
            </summary>
            <param name="node"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node parent's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node parent's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node parent's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node parent's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a node parent's kind is one of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
            <param name="kind6"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TrimLeadingTrivia``1(``0)">
            <summary>
            Removes all leading whitespace from the leading trivia and returns a new node with the new leading trivia.
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> and <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/> is considered to be a whitespace.
            Returns the same node if there is nothing to trim.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TrimTrailingTrivia``1(``0)">
            <summary>
            Removes all trailing whitespace from the trailing trivia and returns a new node with the new trailing trivia.
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> and <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/> is considered to be a whitespace.
            Returns the same node if there is nothing to trim.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TrimTrivia``1(``0)">
            <summary>
            Removes all leading whitespace from the leading trivia and all trailing whitespace from the trailing trivia and returns a new node with the new trivia.
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> and <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/> is considered to be a whitespace.
            Returns the same node if there is nothing to trim.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.FirstAncestor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean)">
            <summary>
            Gets the first ancestor of the specified kind.
            </summary>
            <param name="node"></param>
            <param name="kind"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.FirstAncestor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean)">
            <summary>
            Gets the first ancestor of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.FirstAncestor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean)">
            <summary>
            Gets the first ancestor of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.FirstAncestor(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Gets the first ancestor that matches the predicate.
            </summary>
            <param name="node"></param>
            <param name="predicate"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.FirstAncestorOrSelf(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean)">
            <summary>
            Gets the first ancestor of the specified kind.
            </summary>
            <param name="node"></param>
            <param name="kind"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.FirstAncestorOrSelf(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean)">
            <summary>
            Gets the first ancestor of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.FirstAncestorOrSelf(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean)">
            <summary>
            Gets the first ancestor of the specified kinds.
            </summary>
            <param name="node"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.FirstAncestorOrSelf(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Gets the first ancestor that matches the predicate.
            </summary>
            <param name="node"></param>
            <param name="predicate"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.RemoveTrivia``1(``0,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Creates a new node with the trivia removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.RemoveWhitespace``1(``0,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Creates a new node with the whitespace removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReplaceWhitespace``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Creates a new node with the whitespace replaced.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="replacement"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsInExpressionTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Determines if the specified node is contained in an expression tree.
            </summary>
            <param name="node"></param>
            <param name="semanticModel"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsUnbalancedIfElseDirectives(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns true if the specified node contains <c>#if</c> directive but it does not contain related <c>#endif</c> directive.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsUnbalancedIfElseDirectives(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Returns true if the specified node contains <c>#if</c> directive but it does not contain related <c>#endif</c> directive.
            </summary>
            <param name="node"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.GetFirstDirective(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})">
            <summary>
            Gets the first directive of the tree rooted by this node.
            </summary>
            <param name="node"></param>
            <param name="span"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
            <param name="kind6"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TrimLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Removes all leading whitespace from the leading trivia and returns a new token with the new leading trivia.
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> and <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/> is considered to be a whitespace.
            Returns the same token if there is nothing to trim.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TrimTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Removes all trailing whitespace from the trailing trivia and returns a new token with the new trailing trivia.
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> and <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/> is considered to be a whitespace.
            Returns the same token if there is nothing to trim.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.TrimTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Removes all leading whitespace from the leading trivia and all trailing whitespace from the trailing trivia and returns a new token with the new trivia.
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> and <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/> is considered to be a whitespace.
            Returns the same token if there is nothing to trim.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Contains(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token of the specified kind is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/>.
            </summary>
            <param name="tokenList"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsAny(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token of the specified kinds is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/>.
            </summary>
            <param name="tokenList"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsAny(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token of the specified kinds is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/>.
            </summary>
            <param name="tokenList"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsAny(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token of the specified kinds is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/>.
            </summary>
            <param name="tokenList"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ContainsAny(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token of the specified kinds is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/>.
            </summary>
            <param name="tokenList"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token parent's kind is the specified kind.
            </summary>
            <param name="token"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token parent's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token parent's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token parent's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token parent's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsParentKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token parent's kind is one of the specified kinds.
            </summary>
            <param name="token"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
            <param name="kind6"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Find(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Searches for a token of the specified kind and returns the first occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/>.
            </summary>
            <param name="tokenList"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.RemoveRange(Microsoft.CodeAnalysis.SyntaxTokenList,System.Int32,System.Int32)">
            <summary>
            Creates a new list with tokens in the specified range removed.
            </summary>
            <param name="list"></param>
            <param name="index">An index of the first element to remove.</param>
            <param name="count">A number of elements to remove.</param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReplaceRange(Microsoft.CodeAnalysis.SyntaxTokenList,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})">
            <summary>
            Creates a new list with the tokens in the specified range replaced with new tokens.
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="newTokens"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a trivia's kind is one of the specified kinds.
            </summary>
            <param name="trivia"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="trivia"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="trivia"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="trivia"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a token's kind is one of the specified kinds.
            </summary>
            <param name="trivia"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
            <param name="kind6"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsWhitespaceTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Returns true if the trivia is <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/>.
            </summary>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsEndOfLineTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Returns true if the trivia is <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/>.
            </summary>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsWhitespaceOrEndOfLineTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Returns true if the trivia is either <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> or <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/>.
            </summary>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsDocumentationCommentTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Returns true if the trivia is a documentation comment trivia.
            </summary>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.LastIndexOf(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Searches for a trivia of the specified kind and returns the zero-based index of the last occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SyntaxTriviaList"/>.
            </summary>
            <param name="triviaList"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Contains(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Returns true if a trivia of the specified kind is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxTriviaList"/>.
            </summary>
            <param name="triviaList"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.Find(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Searches for a trivia of the specified kind and returns the first occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SyntaxList`1"/>.
            </summary>
            <param name="triviaList"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsEmptyOrWhitespace(Microsoft.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Returns true if the list of either empty or contains only whitespace (<see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia"/> or <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia"/>).
            </summary>
            <param name="triviaList"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.RemoveRange(Microsoft.CodeAnalysis.SyntaxTriviaList,System.Int32,System.Int32)">
            <summary>
            Creates a new list with trivia in the specified range removed.
            </summary>
            <param name="list"></param>
            <param name="index">An index of the first element to remove.</param>
            <param name="count">A number of elements to remove.</param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.ReplaceRange(Microsoft.CodeAnalysis.SyntaxTriviaList,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new list with the trivia in the specified range replaced with new trivia.
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="newTrivia"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsVoid(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)">
            <summary>
            Returns true if the type is <see cref="T:System.Void"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.DeclarationOrExpression(Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax)">
            <summary>
            Returns using statement's declaration or an expression if the declaration is null.
            </summary>
            <param name="usingStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsYieldBreak(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)">
            <summary>
            Returns true if the specified statement is a yield break statement.
            </summary>
            <param name="yieldStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxExtensions.IsYieldReturn(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)">
            <summary>
            Returns true if the specified statement is a yield return statement.
            </summary>
            <param name="yieldStatement"></param>
        </member>
        <member name="T:Roslynator.CSharp.IfStatementCascade">
            <summary>
            Enables to enumerate if statement cascade.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementCascade.IfStatement">
            <summary>
            The if statement.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascade.GetEnumerator">
            <summary>
            Gets the enumerator for the if-else cascade.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascade.ToString">
            <summary>
            Returns the string representation of the underlying syntax, not including its leading and trailing trivia.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascade.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascade.Equals(Roslynator.CSharp.IfStatementCascade)">
            <summary>
            Determines whether this instance is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascade.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Roslynator.CSharp.IfStatementCascadeInfo">
            <summary>
            Summarizes information about <see cref="T:Roslynator.CSharp.IfStatementCascade"/>.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascadeInfo.#ctor(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)">
            <summary>
            Initializes a new instance of <see cref="T:Roslynator.CSharp.IfStatementCascadeInfo"/>.
            </summary>
            <param name="ifStatement"></param>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementCascadeInfo.IfStatement">
            <summary>
            Gets the topmost 'if' statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementCascadeInfo.Count">
            <summary>
            Gets a number of 'if' statements plus optional 'else' clause at the end of a cascade.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementCascadeInfo.Last">
            <summary>
            Gets a last 'if' or 'else' in a cascade.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementCascadeInfo.EndsWithIf">
            <summary>
            Determines whether the cascade ends with 'if' statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementCascadeInfo.EndsWithElse">
            <summary>
            Determines whether the cascade ends with 'else' clause.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementCascadeInfo.IsSimpleIf">
            <summary>
            Determines whether the cascade consists of single 'if' statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementCascadeInfo.IsSimpleIfElse">
            <summary>
            Determines whether the cascade consists of single if-else.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascadeInfo.ToString">
            <summary>
            Returns the string representation of the underlying syntax, not including its leading and trailing trivia.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascadeInfo.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascadeInfo.Equals(Roslynator.CSharp.IfStatementCascadeInfo)">
            <summary>
            Determines whether this instance is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementCascadeInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Roslynator.CSharp.IfStatementOrElseClause">
            <summary>
            A wrapper for either an <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax"/> or an <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax"/>.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementOrElseClause.Kind">
            <summary>
            Gets an underlying node kind.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementOrElseClause.IsIf">
            <summary>
            Determines whether this <see cref="T:Roslynator.CSharp.IfStatementOrElseClause"/> is wrapping an if statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementOrElseClause.IsElse">
            <summary>
            Determines whether this <see cref="T:Roslynator.CSharp.IfStatementOrElseClause"/> is wrapping an else clause.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementOrElseClause.Statement">
            <summary>
            Gets <see cref="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Statement"/> or <see cref="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.Statement"/>.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementOrElseClause.Parent">
            <summary>
            The node that contains the underlying node in its <see cref="M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodes"/> collection.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementOrElseClause.Span">
            <summary>
            The absolute span of this node in characters, not including its leading and trailing trivia.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.IfStatementOrElseClause.FullSpan">
            <summary>
            The absolute span of this node in characters, including its leading and trailing trivia.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementOrElseClause.AsIf">
            <summary>
            Returns the underlying if statement if this <see cref="T:Roslynator.CSharp.IfStatementOrElseClause"/> is wrapping if statement.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementOrElseClause.AsElse">
            <summary>
            Returns the underlying else clause if this <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax"/> is wrapping else clause.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementOrElseClause.ToString">
            <summary>
            Returns the string representation of the underlying node, not including its leading and trailing trivia.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementOrElseClause.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementOrElseClause.Equals(Roslynator.CSharp.IfStatementOrElseClause)">
            <summary>
            Determines whether this instance is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.CSharp.IfStatementOrElseClause.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationInserter.Insert(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"/> with the specified member inserted.
            </summary>
            <param name="classDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationInserter.Insert(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> with the specified member inserted.
            </summary>
            <param name="compilationUnit"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationInserter.Insert(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax"/> with the specified member inserted.
            </summary>
            <param name="interfaceDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationInserter.Insert(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax"/> with the specified member inserted.
            </summary>
            <param name="namespaceDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationInserter.Insert(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax"/> with the specified member inserted.
            </summary>
            <param name="structDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationInserter.Insert(Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.RecordDeclarationSyntax"/> with the specified member inserted.
            </summary>
            <param name="recordDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationInserter.Insert(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"/> with the specified member removed.
            </summary>
            <param name="typeDeclaration"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationInserter.Insert(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new list with the specified node inserted.
            </summary>
            <param name="members"></param>
            <param name="member"></param>
        </member>
        <member name="T:Roslynator.CSharp.MemberDeclarationListSelection">
            <summary>
            Represents selected member declarations in a <see cref="T:Microsoft.CodeAnalysis.SyntaxList`1"/>.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.MemberDeclarationListSelection.Parent">
            <summary>
            Gets a node that contains selected members.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationListSelection.Create(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.MemberDeclarationListSelection"/> based on the specified compilation unit and span.
            </summary>
            <param name="compilationUnit"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationListSelection.Create(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.MemberDeclarationListSelection"/> based on the specified namespace declaration and span.
            </summary>
            <param name="namespaceDeclaration"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationListSelection.Create(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.MemberDeclarationListSelection"/> based on the specified type declaration and span.
            </summary>
            <param name="typeDeclaration"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationListSelection.TryCreate(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax,Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.CSharp.MemberDeclarationListSelection@)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.MemberDeclarationListSelection"/> based on the specified namespace declaration and span.
            </summary>
            <param name="namespaceDeclaration"></param>
            <param name="span"></param>
            <param name="selectedMembers"></param>
            <returns>True if the specified span contains at least one member; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.CSharp.MemberDeclarationListSelection.TryCreate(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax,Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.CSharp.MemberDeclarationListSelection@)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.MemberDeclarationListSelection"/> based on the specified type declaration and span.
            </summary>
            <param name="typeDeclaration"></param>
            <param name="span"></param>
            <param name="selectedMembers"></param>
            <returns>True if the specified span contains at least one member; otherwise, false.</returns>
        </member>
        <member name="T:Roslynator.CSharp.ModifierFilter">
            <summary>
            Specifies C# modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.None">
            <summary>
            None modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.New">
            <summary>
            A "new" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Public">
            <summary>
            A "public" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Private">
            <summary>
            A "private" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Protected">
            <summary>
            A "protected" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Internal">
            <summary>
            An "internal" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Accessibility">
            <summary>
            An accessibility modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Const">
            <summary>
            A "const" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Static">
            <summary>
            A "static" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Virtual">
            <summary>
            A "virtual" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Sealed">
            <summary>
            A "sealed" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Override">
            <summary>
            An "override" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Abstract">
            <summary>
            An "abstract" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.AbstractVirtualOverride">
            <summary>
            "abstract", "virtual" or "override" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.ReadOnly">
            <summary>
            A "readonly" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Extern">
            <summary>
            An "extern" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Unsafe">
            <summary>
            A "unsafe" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Volatile">
            <summary>
            A "volatile" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Async">
            <summary>
            An "async" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Partial">
            <summary>
            A "partial" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Ref">
            <summary>
            A "ref" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Out">
            <summary>
            An "out" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.In">
            <summary>
            An "in" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.Params">
            <summary>
            A "params" modifier.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.ModifierFilter.This">
            <summary>
            A "this" modifier.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.ModifierList">
            <summary>
            A set of static methods that allows manipulation with modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.GetInsertIndex(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.SyntaxToken})">
            <summary>
            Returns an index the specified token should be inserted at.
            </summary>
            <param name="tokens"></param>
            <param name="token"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.GetInsertIndex(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.CSharp.SyntaxKind})">
            <summary>
            Returns an index a token with the specified kind should be inserted at.
            </summary>
            <param name="tokens"></param>
            <param name="kind"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.Insert``1(``0,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.CSharp.SyntaxKind})">
            <summary>
            Creates a new node with a modifier of the specified kind inserted.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="kind"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.Insert``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.SyntaxToken})">
            <summary>
            Creates a new node with the specified modifier inserted.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="modifier"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.Remove``1(``0,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Creates a new node with a modifier of the specified kind removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.Remove``1(``0,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new node with the specified modifier removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="modifier"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.RemoveAt``1(``0,System.Int32)">
            <summary>
            Creates a new node with a modifier at the specified index removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="index"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.RemoveAll``1(``0,System.Func{Microsoft.CodeAnalysis.SyntaxToken,System.Boolean})">
            <summary>
            Creates a new node with modifiers that matches the predicate removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.RemoveAll``1(``0)">
            <summary>
            Creates a new node with all modifiers removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.Insert(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.CSharp.SyntaxKind})">
            <summary>
            Creates a new list of modifiers with the modifier of the specified kind inserted.
            </summary>
            <param name="modifiers"></param>
            <param name="kind"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList.Insert(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.SyntaxToken})">
            <summary>
            Creates a new list of modifiers with a specified modifier inserted.
            </summary>
            <param name="modifiers"></param>
            <param name="modifier"></param>
            <param name="comparer"></param>
        </member>
        <member name="T:Roslynator.CSharp.ModifierList`1">
            <summary>
            Represents a list of modifiers.
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="P:Roslynator.CSharp.ModifierList`1.Instance">
            <summary>
            Gets an instance of the <see cref="T:Roslynator.CSharp.ModifierList`1"/> for a syntax specified by the generic argument.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList`1.Insert(`0,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.CSharp.SyntaxKind})">
            <summary>
            Creates a new node with a modifier of the specified kind inserted.
            </summary>
            <param name="node"></param>
            <param name="kind"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList`1.Insert(`0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.SyntaxToken})">
            <summary>
            Creates a new node with the specified modifier inserted.
            </summary>
            <param name="node"></param>
            <param name="modifier"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList`1.Remove(`0,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Creates a new node with a modifier of the specified kind removed.
            </summary>
            <param name="node"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList`1.Remove(`0,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new node with the specified modifier removed.
            </summary>
            <param name="node"></param>
            <param name="modifier"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList`1.RemoveAt(`0,System.Int32)">
            <summary>
            Creates a new node with a modifier at the specified index removed.
            </summary>
            <param name="node"></param>
            <param name="index"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList`1.RemoveAll(`0)">
            <summary>
            Creates a new node with all modifiers removed.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.ModifierList`1.RemoveAll(`0,System.Func{Microsoft.CodeAnalysis.SyntaxToken,System.Boolean})">
            <summary>
            Creates a new node with modifiers that matches the predicate removed.
            </summary>
            <param name="node"></param>
            <param name="predicate"></param>
        </member>
        <member name="T:Roslynator.CSharp.Modifiers">
            <summary>
            Serves as a factory for a modifier list.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public">
            <summary>
            Creates a list of modifiers that contains "public" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal">
            <summary>
            Creates a list of modifiers that contains "internal" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected">
            <summary>
            Creates a list of modifiers that contains "protected" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected_Internal">
            <summary>
            Return modifier list that contains "protected internal" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Private">
            <summary>
            Creates a list of modifiers that contains "private" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Private_Protected">
            <summary>
            Creates a list of modifiers that contains "private protected" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Virtual">
            <summary>
            Creates a list of modifiers that contains "virtual" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_Virtual">
            <summary>
            Creates a list of modifiers that contains "public virtual" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_Virtual">
            <summary>
            Creates a list of modifiers that contains "internal virtual" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected_Virtual">
            <summary>
            Creates a list of modifiers that contains "protected virtual" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_Abstract">
            <summary>
            Creates a list of modifiers that contains "public abstract" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_Abstract">
            <summary>
            Creates a list of modifiers that contains "internal abstract" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected_Abstract">
            <summary>
            Creates a list of modifiers that contains "protected abstract" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_Override">
            <summary>
            Creates a list of modifiers that contains "public override" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_Override">
            <summary>
            Creates a list of modifiers that contains "internal override" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected_Override">
            <summary>
            Creates a list of modifiers that contains "protected override" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Const">
            <summary>
            Creates a list of modifiers that contains "const" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_Const">
            <summary>
            Creates a list of modifiers that contains "public const" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_Const">
            <summary>
            Creates a list of modifiers that contains "internal const" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected_Const">
            <summary>
            Creates a list of modifiers that contains "protected const" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Private_Const">
            <summary>
            Creates a list of modifiers that contains "private const" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Static">
            <summary>
            Creates a list of modifiers that contains "static" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_Static">
            <summary>
            Creates a list of modifiers that contains "public static" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_Static">
            <summary>
            Creates a list of modifiers that contains "internal static" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected_Static">
            <summary>
            Creates a list of modifiers that contains "protected static" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Private_Static">
            <summary>
            Creates a list of modifiers that contains "private static" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Static_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "static readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_Static_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "public static readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_Static_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "internal static readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected_Static_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "protected static readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Private_Static_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "private static readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.ReadOnly">
            <summary>
            Creates a list of modifiers that contains "readonly" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "public readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "internal readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Protected_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "protected readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Private_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "private readonly" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Partial">
            <summary>
            Creates a list of modifiers that contains "partial" modifier.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_Partial">
            <summary>
            Creates a list of modifiers that contains "public partial" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_Partial">
            <summary>
            Creates a list of modifiers that contains "internal partial" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Private_Partial">
            <summary>
            Creates a list of modifiers that contains "private partial" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Public_Static_Partial">
            <summary>
            Creates a list of modifiers that contains "public static partial" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Internal_Static_Partial">
            <summary>
            Creates a list of modifiers that contains "internal static partial" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Private_Static_Partial">
            <summary>
            Creates a list of modifiers that contains "private static partial" modifiers.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Modifiers.Ref_ReadOnly">
            <summary>
            Creates a list of modifiers that contains "ref readonly" modifiers.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.NullCheckStyles">
            <summary>
            Specifies a null check.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.None">
            <summary>
            No null check specified.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.EqualsToNull">
            <summary>
            <c>x == null</c>
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.NotEqualsToNull">
            <summary>
            <c>x != null</c>
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.ComparisonToNull">
            <summary>
            Expression that uses equality/inequality operator.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.IsNull">
            <summary>
            <c>x is null</c>
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.NotIsNull">
            <summary>
            <c>!(x is null)</c>
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.NotHasValue">
            <summary>
            <c>!x.HasValue</c>
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.CheckingNull">
            <summary>
            Expression that checks whether an expression is null.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.HasValue">
            <summary>
            <c>x.HasValue</c>
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.HasValueProperty">
            <summary>
            Expression that uses <see cref="P:System.Nullable`1.HasValue"/> property.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.IsNotNull">
            <summary>
            <c>x is not null</c>
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.IsPattern">
            <summary>
            Expression that uses pattern syntax.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.CheckingNotNull">
            <summary>
            Expression that checks whether an expression is not null.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.NullCheckStyles.All">
            <summary>
            All null check styles.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.PreprocessorDirectiveFilter">
            <summary>
            Specifies C# preprocessor directives.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.None">
            <summary>
            No preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.If">
            <summary>
            #if preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Elif">
            <summary>
            #elif preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Else">
            <summary>
            #else preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.EndIf">
            <summary>
            #endif preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Region">
            <summary>
            #region preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.EndRegion">
            <summary>
            #endregion preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Define">
            <summary>
            #define preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Undef">
            <summary>
            #undef preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Error">
            <summary>
            #error preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Warning">
            <summary>
            #warning preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Line">
            <summary>
            #line preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.PragmaWarning">
            <summary>
            #pragma warning preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.PragmaChecksum">
            <summary>
            #pragma checksum preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Pragma">
            <summary>
            #pragma preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Reference">
            <summary>
            #r preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Load">
            <summary>
            #load preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Bad">
            <summary>
            Bad preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Shebang">
            <summary>
            Shebang preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.Nullable">
            <summary>
            Nullable preprocessor directive.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.PreprocessorDirectiveFilter.All">
            <summary>
            All preprocessor directives.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.StatementListSelection">
            <summary>
            Represents selected statements in a <see cref="T:Microsoft.CodeAnalysis.SyntaxList`1"/>.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.StatementListSelection.Create(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.StatementListSelection"/> based on the specified block and span.
            </summary>
            <param name="block"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.StatementListSelection.Create(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.StatementListSelection"/> based on the specified switch section and span.
            </summary>
            <param name="switchSection"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.StatementListSelection.Create(Roslynator.CSharp.Syntax.StatementListInfo@,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.StatementListSelection"/> based on the specified <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> and span.
            </summary>
            <param name="statementsInfo"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.CSharp.StatementListSelection.TryCreate(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.CSharp.StatementListSelection@)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.StatementListSelection"/> based on the specified block and span.
            </summary>
            <param name="block"></param>
            <param name="span"></param>
            <param name="selectedStatements"></param>
            <returns>True if the specified span contains at least one statement; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.CSharp.StatementListSelection.TryCreate(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax,Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.CSharp.StatementListSelection@)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.StatementListSelection"/> based on the specified switch section and span.
            </summary>
            <param name="switchSection"></param>
            <param name="span"></param>
            <param name="selectedStatements"></param>
            <returns>True if the specified span contains at least one statement; otherwise, false.</returns>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.AsExpressionInfo">
            <summary>
            Provides information about "as" expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AsExpressionInfo.AsExpression">
            <summary>
            The "as" expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AsExpressionInfo.Expression">
            <summary>
            The expression that is being casted.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AsExpressionInfo.Type">
            <summary>
            The type to which the expression is being cast.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AsExpressionInfo.OperatorToken">
            <summary>
            The "as" operator token.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AsExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.AssignmentExpressionInfo">
            <summary>
            Provides information about simple assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AssignmentExpressionInfo.AssignmentExpression">
            <summary>
            The simple assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AssignmentExpressionInfo.Left">
            <summary>
            The expression on the left of the assignment operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AssignmentExpressionInfo.Right">
            <summary>
            The expression on the right of the assignment operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AssignmentExpressionInfo.OperatorToken">
            <summary>
            The operator of the simple assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AssignmentExpressionInfo.Kind">
            <summary>
            The kind of the assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.AssignmentExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.BinaryExpressionInfo">
            <summary>
            Provides information about binary expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.BinaryExpressionInfo.BinaryExpression">
            <summary>
            The binary expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.BinaryExpressionInfo.Left">
            <summary>
            The expression on the left of the binary operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.BinaryExpressionInfo.Right">
            <summary>
            The expression on the right of the binary operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.BinaryExpressionInfo.OperatorToken">
            <summary>
            The operator of the binary expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.BinaryExpressionInfo.Kind">
            <summary>
            The kind of the binary expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.BinaryExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.BinaryExpressionInfo.AsChain">
            <summary>
            Returns <see cref="T:Roslynator.CSharp.ExpressionChain"/> that enables to enumerate expressions of a binary expression.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.ConditionalExpressionInfo">
            <summary>
            Provides information about conditional expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalExpressionInfo.ConditionalExpression">
            <summary>
            The conditional expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalExpressionInfo.Condition">
            <summary>
            The condition expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalExpressionInfo.WhenTrue">
            <summary>
            The expression to be executed when the expression is true.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalExpressionInfo.WhenFalse">
            <summary>
            The expression to be executed when the expression is false.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalExpressionInfo.QuestionToken">
            <summary>
            The token representing the question mark.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalExpressionInfo.ColonToken">
            <summary>
            The token representing the colon.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.ConditionalStatementInfo">
            <summary>
            Provides information about a simple if-else where if and else contains single non-block statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalStatementInfo.IfStatement">
            <summary>
            The if statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalStatementInfo.Condition">
            <summary>
            The condition.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalStatementInfo.WhenTrue">
            <summary>
            The statement that is executed if the condition evaluates to true.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalStatementInfo.WhenFalse">
            <summary>
            The statement that is executed if the condition evaluates to false.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalStatementInfo.Else">
            <summary>
            The else clause.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ConditionalStatementInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.GenericInfo">
            <summary>
            Provides information about generic syntax (class, struct, interface, delegate, method or local function).
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.GenericInfo.Node">
            <summary>
            The syntax node that can be generic (for example <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"/> for a class or <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax"/> for a local function).
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.GenericInfo.Kind">
            <summary>
            The kind of this syntax node.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.GenericInfo.TypeParameterList">
            <summary>
            The type parameter list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.GenericInfo.TypeParameters">
            <summary>
            A list of type parameters.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.GenericInfo.ConstraintClauses">
            <summary>
            A list of constraint clauses.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.GenericInfo.FindTypeParameter(System.String)">
            <summary>
            Searches for a type parameter with the specified name and returns the first occurrence within the type parameters.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.GenericInfo.FindConstraintClause(System.String)">
            <summary>
            Searches for a constraint clause with the specified type parameter name and returns the first occurrence within the constraint clauses.
            </summary>
            <param name="typeParameterName"></param>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.GenericInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.GenericInfo.WithTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> with the type parameter list updated.
            </summary>
            <param name="typeParameterList"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.GenericInfo.RemoveTypeParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> with the specified type parameter removed.
            </summary>
            <param name="typeParameter"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.GenericInfo.WithConstraintClauses(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> with the constraint clauses updated.
            </summary>
            <param name="constraintClauses"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.GenericInfo.RemoveConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> with the specified constraint clause removed.
            </summary>
            <param name="constraintClause"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.GenericInfo.RemoveAllConstraintClauses">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> with all constraint clauses removed.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.IsExpressionInfo">
            <summary>
            Provides information about "is" expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.IsExpressionInfo.IsExpression">
            <summary>
            The "is" expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.IsExpressionInfo.Expression">
            <summary>
            The expression that is being casted.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.IsExpressionInfo.Type">
            <summary>
            The type to which the expression is being cast.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.IsExpressionInfo.OperatorToken">
            <summary>
            The "is" operator token.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.IsExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo">
            <summary>
            Provides information about local declaration statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo.Statement">
            <summary>
            The local declaration statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo.Modifiers">
            <summary>
            The modifier list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo.Type">
            <summary>
            The type of the declaration.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo.Declaration">
            <summary>
            The variable declaration.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo.Variables">
            <summary>
            A list of variables.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo.SemicolonToken">
            <summary>
            The semicolon token.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo">
            <summary>
            Provides information about a list of member declaration list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Parent">
            <summary>
            The declaration that contains the members.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Members">
            <summary>
            A list of members.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Count">
            <summary>
            A number of members in the list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.OpenBraceToken">
            <summary>
            Gets a open brace token.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.CloseBraceToken">
            <summary>
            Gets a close brace token.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Item(System.Int32)">
            <summary>
            Gets the member at the specified index in the list.
            </summary>
            <param name="index">The zero-based index of the member to get. </param>
            <returns>The member at the specified index in the list.</returns>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.GetEnumerator">
            <summary>
            Gets the enumerator for the list of members.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.WithMembers(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the members updated.
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.WithMembers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the members updated.
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified node removed.
            </summary>
            <param name="node"></param>
            <param name="options"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified old node replaced with a new node.
            </summary>
            <param name="oldNode"></param>
            <param name="newNode"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Add(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified member added at the end.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified members added at the end.
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Any">
            <summary>
            True if the list has at least one member.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.First">
            <summary>
            The first member in the list.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.FirstOrDefault">
            <summary>
            The first member in the list or null if the list is empty.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.IndexOf(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,System.Boolean})">
            <summary>
            Searches for a member that matches the predicate and returns zero-based index of the first occurrence in the list.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.IndexOf(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            The index of the member in the list.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Insert(System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified member inserted at the index.
            </summary>
            <param name="index"></param>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified members inserted at the index.
            </summary>
            <param name="index"></param>
            <param name="members"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Last">
            <summary>
            The last member in the list.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.LastOrDefault">
            <summary>
            The last member in the list or null if the list is empty.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.LastIndexOf(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,System.Boolean})">
            <summary>
            Searches for a member that matches the predicate and returns zero-based index of the last occurrence in the list.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.LastIndexOf(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Searches for a member and returns zero-based index of the last occurrence in the list.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Remove(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified member removed.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.RemoveAt(System.Int32)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the member at the specified index removed.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.Replace(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified member replaced with the new member.
            </summary>
            <param name="memberInList"></param>
            <param name="newMember"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.ReplaceAt(System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the member at the specified index replaced with a new member.
            </summary>
            <param name="index"></param>
            <param name="newMember"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.MemberDeclarationListInfo.ReplaceRange(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> with the specified member replaced with new members.
            </summary>
            <param name="memberInList"></param>
            <param name="newMembers"></param>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.ModifierListInfo">
            <summary>
            Provides information about modifier list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.Parent">
            <summary>
            The node that contains the modifiers.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.Modifiers">
            <summary>
            The modifier list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.ExplicitAccessibility">
            <summary>
            The explicit accessibility.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsNew">
            <summary>
            True if the modifier list contains "new" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsConst">
            <summary>
            True if the modifier list contains "const" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsStatic">
            <summary>
            True if the modifier list contains "static" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsVirtual">
            <summary>
            True if the modifier list contains "virtual" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsSealed">
            <summary>
            True if the modifier list contains "sealed" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsOverride">
            <summary>
            True if the modifier list contains "override" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsAbstract">
            <summary>
            True if the modifier list contains "abstract" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsReadOnly">
            <summary>
            True if the modifier list contains "readonly" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsExtern">
            <summary>
            True if the modifier list contains "extern" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsUnsafe">
            <summary>
            True if the modifier list contains "unsafe" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsVolatile">
            <summary>
            True if the modifier list contains "volatile" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsAsync">
            <summary>
            True if the modifier list contains "async" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsPartial">
            <summary>
            True if the modifier list contains "partial" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsRef">
            <summary>
            True if the modifier list contains "ref" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsOut">
            <summary>
            True if the modifier list contains "out" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsIn">
            <summary>
            True if the modifier list contains "in" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.IsParams">
            <summary>
            True if the modifier list contains "params" modifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.ModifierListInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.ModifierListInfo.WithoutExplicitAccessibility">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> with accessibility modifiers removed.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.ModifierListInfo.WithExplicitAccessibility(Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.CSharp.SyntaxKind})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> with accessibility modifiers updated.
            </summary>
            <param name="newAccessibility"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.ModifierListInfo.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> with the specified modifiers updated.
            </summary>
            <param name="modifiers"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.ModifierListInfo.GetFilter">
            <summary>
            Gets the modifier filter.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.NullCheckExpressionInfo">
            <summary>
            Provides information about a null check expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.NullCheckExpressionInfo.NullCheckExpression">
            <summary>
            The null check expression, e.g. "x == null".
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.NullCheckExpressionInfo.Expression">
            <summary>
            The expression that is evaluated whether is (not) null. for example "x" in "x == null".
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.NullCheckExpressionInfo.Style">
            <summary>
            The style of this null check.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.NullCheckExpressionInfo.IsCheckingNull">
            <summary>
            Determines whether this null check is checking if the expression is null.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.NullCheckExpressionInfo.IsCheckingNotNull">
            <summary>
            Determines whether this null check is checking if the expression is not null.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.NullCheckExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.RegionInfo">
            <summary>
            Provides information about a region.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.RegionInfo.Directive">
            <summary>
            #region directive.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.RegionInfo.EndDirective">
            <summary>
            #endregion directive.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.RegionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.RegionInfo.Span">
            <summary>
            The absolute span of this region, not including its leading and trailing trivia.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.RegionInfo.FullSpan">
            <summary>
            The absolute span of this region, including its leading and trailing trivia.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.RegionInfo.IsEmpty">
            <summary>
            Determines whether this region is empty, i.e. contains only white-space.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.SimpleAssignmentExpressionInfo">
            <summary>
            Provides information about simple assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentExpressionInfo.AssignmentExpression">
            <summary>
            The simple assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentExpressionInfo.Left">
            <summary>
            The expression on the left of the assignment operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentExpressionInfo.Right">
            <summary>
            The expression on the right of the assignment operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentExpressionInfo.OperatorToken">
            <summary>
            The operator of the simple assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo">
            <summary>
            Provides information about a simple assignment expression in an expression statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo.AssignmentExpression">
            <summary>
            The simple assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo.Left">
            <summary>
            The expression on the left of the assignment operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo.Right">
            <summary>
            The expression of the right of the assignment operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo.OperatorToken">
            <summary>
            The operator of the simple assignment expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo.Statement">
            <summary>
            The expression statement the simple assignment expression is contained in.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.SimpleIfStatementInfo">
            <summary>
            Provides information about a simple if statement.
            Simple if statement is defined as follows: it is not a child of an else clause and it has no else clause.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleIfStatementInfo.IfStatement">
            <summary>
            The if statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleIfStatementInfo.Condition">
            <summary>
            The condition.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleIfStatementInfo.Statement">
            <summary>
            The statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleIfStatementInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo">
            <summary>
            Provides information about invocation expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.InvocationExpression">
            <summary>
            The invocation expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.MemberAccessExpression">
            <summary>
            The member access expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.Expression">
            <summary>
            The expression that contains the member being invoked.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.Name">
            <summary>
            The name of the member being invoked.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.ArgumentList">
            <summary>
            The argument list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.Arguments">
            <summary>
            The list of the arguments.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.OperatorToken">
            <summary>
            The operator in the member access expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.NameText">
            <summary>
            The name of the member being invoked.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo">
            <summary>
            Provides information about invocation expression in an expression statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.InvocationExpression">
            <summary>
            The invocation expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.MemberAccessExpression">
            <summary>
            The member access expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.Expression">
            <summary>
            The expression that contains the member being invoked.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.Name">
            <summary>
            The name of the member being invoked.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.ArgumentList">
            <summary>
            The argument list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.Arguments">
            <summary>
            A list of arguments.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.NameText">
            <summary>
            The name of the member being invoked.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.Statement">
            <summary>
            The expression statement that contains the invocation expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo">
            <summary>
            Provides information about a local declaration statement with a single variable.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Statement">
            <summary>
            The local declaration statement.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Declarator">
            <summary>
            The variable declarator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Declaration">
            <summary>
            The variable declaration.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Initializer">
            <summary>
            The variable initializer, if any.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Value">
            <summary>
            The initialized value, if any.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Modifiers">
            <summary>
            The modifier list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Type">
            <summary>
            The type of a declaration.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Identifier">
            <summary>
            Variable identifier.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.IdentifierText">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.EqualsToken">
            <summary>
            The equals token.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.SemicolonToken">
            <summary>
            The semicolon.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo">
            <summary>
            Provides information about a lambda expression with a single parameter.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo.LambdaExpression">
            <summary>
            The lambda expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo.Parameter">
            <summary>
            The parameter.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo.Body">
            <summary>
            The body of the lambda expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo.ParameterList">
            <summary>
            The parameter list that contains the parameter.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo.IsSimpleLambda">
            <summary>
            True if this instance is a simple lambda expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo.IsParenthesizedLambda">
            <summary>
            True if this instance is a parenthesized lambda expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.StatementListInfo">
            <summary>
            Provides information about a list of statements.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.Parent">
            <summary>
            The node that contains the statements. It can be either a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax"/> or a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax"/>.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.Statements">
            <summary>
            The list of statements.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.IsParentBlock">
            <summary>
            Determines whether the statements are contained in a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax"/>.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.IsParentSwitchSection">
            <summary>
            Determines whether the statements are contained in a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax"/>.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.ParentAsBlock">
            <summary>
            Gets a block that contains the statements. Returns null if the statements are not contained in a block.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.ParentAsSwitchSection">
            <summary>
            Gets a switch section that contains the statements. Returns null if the statements are not contained in a switch section.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.Count">
            <summary>
            The number of statement in the list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StatementListInfo.Item(System.Int32)">
            <summary>
            Gets the statement at the specified index in the list.
            </summary>
            <param name="index">The zero-based index of the statement to get. </param>
            <returns>The statement at the specified index in the list.</returns>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.GetEnumerator">
            <summary>
            Gets the enumerator the list of statements.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.WithStatements(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the statements updated.
            </summary>
            <param name="statements"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.WithStatements(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the statements updated.
            </summary>
            <param name="statements"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified node removed.
            </summary>
            <param name="node"></param>
            <param name="options"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified old node replaced with a new node.
            </summary>
            <param name="oldNode"></param>
            <param name="newNode"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.Add(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified statement added at the end.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified statements added at the end.
            </summary>
            <param name="statements"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.Any">
            <summary>
            True if the list has at least one statement.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.First">
            <summary>
            The first statement in the list.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.FirstOrDefault">
            <summary>
            The first statement in the list or null if the list is empty.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.IndexOf(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Boolean})">
            <summary>
            Searches for a statement that matches the predicate and returns zero-based index of the first occurrence in the list.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.IndexOf(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            The index of the statement in the list.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.Insert(System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified statement inserted at the index.
            </summary>
            <param name="index"></param>
            <param name="statement"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified statements inserted at the index.
            </summary>
            <param name="index"></param>
            <param name="statements"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.Last">
            <summary>
            The last statement in the list.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.LastOrDefault">
            <summary>
            The last statement in the list or null if the list is empty.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.LastIndexOf(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Boolean})">
            <summary>
            Searches for a statement that matches the predicate and returns zero-based index of the last occurrence in the list.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.LastIndexOf(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Searches for a statement and returns zero-based index of the last occurrence in the list.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.Remove(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified statement removed.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.RemoveAt(System.Int32)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the statement at the specified index removed.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.Replace(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified statement replaced with the new statement.
            </summary>
            <param name="statementInList"></param>
            <param name="newStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.ReplaceAt(System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the statement at the specified index replaced with a new statement.
            </summary>
            <param name="index"></param>
            <param name="newStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StatementListInfo.ReplaceRange(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> with the specified statement replaced with new statements.
            </summary>
            <param name="statementInList"></param>
            <param name="newStatements"></param>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.StringConcatenationExpressionInfo">
            <summary>
            Provides information about string concatenation, i.e. a binary expression that binds to string '+' operator.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringConcatenationExpressionInfo.BinaryExpression">
            <summary>
            The binary expression that represents the string concatenation.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringConcatenationExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.StringConcatenationExpressionInfo.AsChain">
            <summary>
            Returns <see cref="T:Roslynator.CSharp.ExpressionChain"/> that enables to enumerate expressions of a string concatenation.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo">
            <summary>
            Provides information about string literal expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.Expression">
            <summary>
            The string literal expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.Token">
            <summary>
            The token representing the string literal expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.Text">
            <summary>
            The token text.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.InnerText">
            <summary>
            The token text, not including leading ampersand, if any, and enclosing quotation marks.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.ValueText">
            <summary>
            The token value text.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.IsRegular">
            <summary>
            True if this instance is regular string literal expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.IsVerbatim">
            <summary>
            True if this instance is verbatim string literal expression.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.ContainsLinefeed">
            <summary>
            True if the string literal contains linefeed.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.ContainsEscapeSequence">
            <summary>
            True if the string literal expression contains escape sequence.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.TypeParameterConstraintInfo">
            <summary>
            Provides information about a type parameter constraint.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.TypeParameterConstraintInfo.Constraint">
            <summary>
            The type parameter constraint.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.TypeParameterConstraintInfo.ConstraintClause">
            <summary>
            The constraint clause that contains this constraint in <see cref="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Constraints"/> collection.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.TypeParameterConstraintInfo.Constraints">
            <summary>
            A list of constraints that contains this constraint.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.TypeParameterConstraintInfo.Name">
            <summary>
            The identifier name of this constraint.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.TypeParameterConstraintInfo.NameText">
            <summary>
            The name of this constraint.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.TypeParameterConstraintInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo">
            <summary>
            Provides information about a list of using directives.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Parent">
            <summary>
            The declaration that contains the usings.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Usings">
            <summary>
            A list of usings.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Count">
            <summary>
            A number of usings in the list.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Item(System.Int32)">
            <summary>
            Gets the using directive at the specified index in the list.
            </summary>
            <param name="index">The zero-based index of the using directive to get. </param>
            <returns>The using directive at the specified index in the list.</returns>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.GetEnumerator">
            <summary>
            Gets the enumerator for the list of usings.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.WithUsings(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the usings updated.
            </summary>
            <param name="usings"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.WithUsings(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the usings updated.
            </summary>
            <param name="usings"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified node removed.
            </summary>
            <param name="node"></param>
            <param name="options"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified old node replaced with a new node.
            </summary>
            <param name="oldNode"></param>
            <param name="newNode"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Add(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified using directive added at the end.
            </summary>
            <param name="usingDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified usings added at the end.
            </summary>
            <param name="usings"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Any">
            <summary>
            True if the list has at least one using directive.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.First">
            <summary>
            The first using directive in the list.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.FirstOrDefault">
            <summary>
            The first using directive in the list or null if the list is empty.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.IndexOf(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax,System.Boolean})">
            <summary>
            Searches for an using directive that matches the predicate and returns zero-based index of the first occurrence in the list.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.IndexOf(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary>
            The index of the using directive in the list.
            </summary>
            <param name="usingDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Insert(System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified using directive inserted at the index.
            </summary>
            <param name="index"></param>
            <param name="usingDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified usings inserted at the index.
            </summary>
            <param name="index"></param>
            <param name="usings"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Last">
            <summary>
            The last using directive in the list.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.LastOrDefault">
            <summary>
            The last using directive in the list or null if the list is empty.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.LastIndexOf(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax,System.Boolean})">
            <summary>
            Searches for an using directive that matches the predicate and returns zero-based index of the last occurrence in the list.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.LastIndexOf(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary>
            Searches for an using directive and returns zero-based index of the last occurrence in the list.
            </summary>
            <param name="usingDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Remove(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified using directive removed.
            </summary>
            <param name="usingDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.RemoveAt(System.Int32)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the using directive at the specified index removed.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.Replace(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified using directive replaced with the new using directive.
            </summary>
            <param name="usingInLine"></param>
            <param name="newUsingDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.ReplaceAt(System.Int32,Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the using directive at the specified index replaced with a new using directive.
            </summary>
            <param name="index"></param>
            <param name="newUsingDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.Syntax.UsingDirectiveListInfo.ReplaceRange(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax})">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> with the specified using directive replaced with new usings.
            </summary>
            <param name="usingInLine"></param>
            <param name="newUsingDirectives"></param>
        </member>
        <member name="T:Roslynator.CSharp.Syntax.XmlElementInfo">
            <summary>
            Provides information about a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax"/> or <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax"/>.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.XmlElementInfo.Element">
            <summary>
            The xml element.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.XmlElementInfo.LocalName">
            <summary>
            Local name of the element.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.XmlElementInfo.Kind">
            <summary>
            Element kind.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.XmlElementInfo.IsEmptyElement">
            <summary>
            Determines whether the element is <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.XmlEmptyElement"/>.
            </summary>
        </member>
        <member name="P:Roslynator.CSharp.Syntax.XmlElementInfo.Success">
            <summary>
            Determines whether this struct was initialized with an actual syntax.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.SyntaxAccessibility">
            <summary>
            A set of static methods that are related to C# accessibility.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.GetDefaultAccessibility(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns a default accessibility of the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.GetDefaultExplicitAccessibility(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns a default explicit accessibility of the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.GetAccessibility(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns an accessibility of the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.GetExplicitAccessibility(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns an explicit accessibility of the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.GetExplicitAccessibility(Microsoft.CodeAnalysis.SyntaxTokenList)">
            <summary>
            Returns an explicit accessibility of the specified modifiers.
            </summary>
            <param name="modifiers"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.IsPubliclyVisible(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary>
            Return true if the specified declaration is publicly visible.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.WithoutExplicitAccessibility``1(``0)">
            <summary>
            Creates a new node with the explicit accessibility removed.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.WithExplicitAccessibility``1(``0,Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IComparer{Microsoft.CodeAnalysis.CSharp.SyntaxKind})">
            <summary>
            Creates a new node with the specified explicit accessibility updated.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="newAccessibility"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility.IsValidAccessibility(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,System.Boolean)">
            <summary>
            Returns true if the node can have specified accessibility.
            </summary>
            <param name="node"></param>
            <param name="accessibility"></param>
            <param name="ignoreOverride">Ignore "override" modifier.</param>
        </member>
        <member name="T:Roslynator.CSharp.SyntaxAccessibility`1">
            <summary>
            Defines a set of methods related to C# accessibility.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility`1.GetAccessibility(`0)">
            <summary>
            Returns an accessibility of the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility`1.GetDefaultAccessibility(`0)">
            <summary>
            Returns a default accessibility of the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility`1.GetExplicitAccessibility(`0)">
            <summary>
            Returns an explicit accessibility of the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxAccessibility`1.GetDefaultExplicitAccessibility(`0)">
            <summary>
            Returns a default explicit accessibility of the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="T:Roslynator.CSharp.SyntaxInfo">
            <summary>
            Serves as a factory for types in Roslynator.CSharp.Syntax namespace.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.AsExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.AsExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.AsExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.AsExpressionInfo"/> from the specified binary expression.
            </summary>
            <param name="binaryExpression"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.AssignmentExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.AssignmentExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.AssignmentExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.AssignmentExpressionInfo"/> from the specified assignment expression.
            </summary>
            <param name="assignmentExpression"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.BinaryExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.BinaryExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.BinaryExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.BinaryExpressionInfo"/> from the specified binary expression.
            </summary>
            <param name="binaryExpression"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ConditionalExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ConditionalExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ConditionalExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ConditionalExpressionInfo"/> from the specified conditional expression.
            </summary>
            <param name="conditionalExpression"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ConditionalStatementInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ConditionalStatementInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ConditionalStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ConditionalStatementInfo"/> from the specified 'if' statement.
            </summary>
            <param name="ifStatement"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified type parameter constraint.
            </summary>
            <param name="typeParameterConstraint"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified constraint clause.
            </summary>
            <param name="constraintClause"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified type parameter.
            </summary>
            <param name="typeParameter"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified type parameter list.
            </summary>
            <param name="typeParameterList"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified type declaration.
            </summary>
            <param name="typeDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified delegate declaration.
            </summary>
            <param name="delegateDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified local function.
            </summary>
            <param name="localFunctionStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.GenericInfo(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.GenericInfo"/> from the specified method declaration.
            </summary>
            <param name="methodDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.IsExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.IsExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.IsExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.IsExpressionInfo"/> from the specified binary expression.
            </summary>
            <param name="binaryExpression"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.LocalDeclarationStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo"/> from the specified local declaration statement.
            </summary>
            <param name="localDeclarationStatement"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.LocalDeclarationStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.LocalDeclarationStatementInfo"/> from the specified expression.
            </summary>
            <param name="value"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.MemberDeclarationListInfo(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.MemberDeclarationListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> from the specified compilation unit.
            </summary>
            <param name="compilationUnit"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.MemberDeclarationListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> from the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.MemberDeclarationListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.BaseNamespaceDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> from the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.MemberDeclarationListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> from the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.MemberDeclarationListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> from the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.MemberDeclarationListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> from the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.MemberDeclarationListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.MemberDeclarationListInfo"/> from the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleMemberInvocationExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleMemberInvocationExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleMemberInvocationExpressionInfo"/> from the specified invocation expression.
            </summary>
            <param name="invocationExpression"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleMemberInvocationStatementInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleMemberInvocationStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo"/> from the specified expression statement.
            </summary>
            <param name="expressionStatement"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleMemberInvocationStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleMemberInvocationStatementInfo"/> from the specified invocation expression.
            </summary>
            <param name="invocationExpression"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified class declaration.
            </summary>
            <param name="classDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified constructor declaration.
            </summary>
            <param name="constructorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified conversion operator declaration.
            </summary>
            <param name="conversionOperatorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified delegate declaration.
            </summary>
            <param name="delegateDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified destructor declaration.
            </summary>
            <param name="destructorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified enum declaration.
            </summary>
            <param name="enumDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified event declaration.
            </summary>
            <param name="eventDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified event field declaration.
            </summary>
            <param name="eventFieldDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified field declaration.
            </summary>
            <param name="fieldDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified indexer declaration.
            </summary>
            <param name="indexerDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified interface declaration.
            </summary>
            <param name="interfaceDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified method declaration.
            </summary>
            <param name="methodDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified operator declaration.
            </summary>
            <param name="operatorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified property declaration.
            </summary>
            <param name="propertyDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified struct declaration.
            </summary>
            <param name="structDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified incomplete member.
            </summary>
            <param name="incompleteMember"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified accessor declaration.
            </summary>
            <param name="accessorDeclaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified local declaration statement.
            </summary>
            <param name="localDeclarationStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified local function.
            </summary>
            <param name="localFunctionStatement"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.ModifierListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.ModifierListInfo"/> from the specified parameter.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.NullCheckExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,Roslynator.CSharp.NullCheckStyles,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.NullCheckExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="allowedStyles"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.NullCheckExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,Roslynator.CSharp.NullCheckStyles,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.NullCheckExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="semanticModel"></param>
            <param name="allowedStyles"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.RegionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.RegionInfo"/> from the specified region directive.
            </summary>
            <param name="regionDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.RegionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.RegionInfo"/> from the specified endregion directive.
            </summary>
            <param name="endRegionDirective"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleAssignmentExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleAssignmentExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleAssignmentExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleAssignmentExpressionInfo"/> from the specified assignment expression.
            </summary>
            <param name="assignmentExpression"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleAssignmentStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo"/> from the specified statement.
            </summary>
            <param name="statement"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleAssignmentStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo"/> from the specified assignment expression.
            </summary>
            <param name="assignmentExpression"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleAssignmentStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleAssignmentStatementInfo"/> from the specified expression statement.
            </summary>
            <param name="expressionStatement"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleIfStatementInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleIfStatementInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SimpleIfStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SimpleIfStatementInfo"/> from the specified if statement.
            </summary>
            <param name="ifStatement"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SingleLocalDeclarationStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo"/> from the specified statement.
            </summary>
            <param name="statement"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SingleLocalDeclarationStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo"/> from the specified local declaration statement.
            </summary>
            <param name="localDeclarationStatement"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SingleLocalDeclarationStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo"/> from the specified variable declaration.
            </summary>
            <param name="variableDeclaration"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SingleLocalDeclarationStatementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SingleLocalDeclarationStatementInfo"/> from the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SingleParameterLambdaExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.SingleParameterLambdaExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.SingleParameterLambdaExpressionInfo"/> from the specified lambda expression.
            </summary>
            <param name="lambdaExpression"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.StatementListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StatementListInfo"/> from the specified statement.
            </summary>
            <param name="statementInList"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.StringConcatenationExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StringConcatenationExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="semanticModel"></param>
            <param name="walkDownParentheses"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.StringConcatenationExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StringConcatenationExpressionInfo"/> from the specified node.
            </summary>
            <param name="binaryExpression"></param>
            <param name="semanticModel"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.StringConcatenationExpressionInfo(Roslynator.CSharp.ExpressionChain@,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StringConcatenationExpressionInfo"/> from the specified expression chain.
            </summary>
            <param name="expressionChain"></param>
            <param name="semanticModel"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.StringLiteralExpressionInfo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
            <param name="walkDownParentheses"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.StringLiteralExpressionInfo(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.StringLiteralExpressionInfo"/> from the specified literal expression.
            </summary>
            <param name="literalExpression"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.TypeParameterConstraintInfo(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.TypeParameterConstraintInfo"/> from the specified constraint.
            </summary>
            <param name="constraint"></param>
            <param name="allowMissing"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.UsingDirectiveListInfo(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> from the specified node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.UsingDirectiveListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> from the specified compilation unit.
            </summary>
            <param name="compilationUnit"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.UsingDirectiveListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> from the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.UsingDirectiveListInfo(Microsoft.CodeAnalysis.CSharp.Syntax.FileScopedNamespaceDeclarationSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.UsingDirectiveListInfo"/> from the specified declaration.
            </summary>
            <param name="declaration"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInfo.XmlElementInfo(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax)">
            <summary>
            Creates a new <see cref="T:Roslynator.CSharp.Syntax.XmlElementInfo"/> from the specified xml node.
            </summary>
            <param name="xmlNode"></param>
        </member>
    </members>
</doc>
