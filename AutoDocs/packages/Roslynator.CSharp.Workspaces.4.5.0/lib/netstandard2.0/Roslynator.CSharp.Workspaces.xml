<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Roslynator.CSharp.Workspaces</name>
    </assembly>
    <members>
        <member name="T:Roslynator.CSharp.DefaultSyntaxOptions">
            <summary>
            Defines how a syntax representing a default value of a type should look like.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.DefaultSyntaxOptions.None">
            <summary>
            No option specified.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.DefaultSyntaxOptions.UseDefault">
            <summary>
            Use <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefaultExpression"/> or <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefaultLiteralExpression"/>.
            </summary>
        </member>
        <member name="F:Roslynator.CSharp.DefaultSyntaxOptions.AllowDefaultLiteral">
            <summary>
            Allow <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefaultLiteralExpression"/> instead of <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DefaultExpression"/>.
            </summary>
        </member>
        <member name="T:Roslynator.CSharp.WorkspaceExtensions">
            <summary>
            A set of extension methods for the workspace layer.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.RemoveMemberAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,System.Threading.CancellationToken)">
            <summary>
            Create a new document with the specified member declaration removed.
            </summary>
            <param name="document"></param>
            <param name="member"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.RemoveCommentsAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.CommentFilter,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with comments of the specified kind removed.
            </summary>
            <param name="document"></param>
            <param name="comments"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.RemoveCommentsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.CSharp.CommentFilter,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with comments of the specified kind removed.
            </summary>
            <param name="document"></param>
            <param name="span"></param>
            <param name="comments"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.RemoveTriviaAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with trivia inside the specified span removed.
            </summary>
            <param name="document"></param>
            <param name="span"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.RemovePreprocessorDirectivesAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.PreprocessorDirectiveFilter,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with preprocessor directives of the specified kind removed.
            </summary>
            <param name="document"></param>
            <param name="directiveFilter"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.RemovePreprocessorDirectivesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.CSharp.PreprocessorDirectiveFilter,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with preprocessor directives of the specified kind removed.
            </summary>
            <param name="document"></param>
            <param name="span"></param>
            <param name="directiveFilter"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.RemoveRegionAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.Syntax.RegionInfo,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified region removed.
            </summary>
            <param name="document"></param>
            <param name="region"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.ReplaceStatementsAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.Syntax.StatementListInfo,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified statements replaced with new statements.
            </summary>
            <param name="document"></param>
            <param name="statementsInfo"></param>
            <param name="newStatements"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.ReplaceStatementsAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.Syntax.StatementListInfo,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified statements replaced with new statements.
            </summary>
            <param name="document"></param>
            <param name="statementsInfo"></param>
            <param name="newStatements"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.ReplaceMembersAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.Syntax.MemberDeclarationListInfo,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified members replaced with new members.
            </summary>
            <param name="document"></param>
            <param name="info"></param>
            <param name="newMembers"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.ReplaceMembersAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.Syntax.MemberDeclarationListInfo,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified members replaced with new members.
            </summary>
            <param name="document"></param>
            <param name="info"></param>
            <param name="newMembers"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.ReplaceModifiersAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.Syntax.ModifierListInfo,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified modifiers replaced with new modifiers.
            </summary>
            <param name="document"></param>
            <param name="modifiersInfo"></param>
            <param name="newModifiers"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceExtensions.ReplaceModifiersAsync(Microsoft.CodeAnalysis.Document,Roslynator.CSharp.Syntax.ModifierListInfo,Microsoft.CodeAnalysis.SyntaxTokenList,System.Threading.CancellationToken)">
            <summary>
            Creates a new document with the specified modifiers replaced with new modifiers.
            </summary>
            <param name="document"></param>
            <param name="modifiersInfo"></param>
            <param name="newModifiers"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSymbolExtensions.GetDefaultValueSyntax(Microsoft.CodeAnalysis.ITypeSymbol,Roslynator.CSharp.DefaultSyntaxOptions,Microsoft.CodeAnalysis.SymbolDisplayFormat)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/> that represents default value of the specified type symbol.
            </summary>
            <param name="typeSymbol"></param>
            <param name="options"></param>
            <param name="format"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSymbolExtensions.GetDefaultValueSyntax(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Roslynator.CSharp.DefaultSyntaxOptions)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/> that represents default value of the specified type symbol.
            </summary>
            <param name="typeSymbol"></param>
            <param name="type"></param>
            <param name="options"></param>
        </member>
        <member name="T:Roslynator.CSharp.WorkspaceSyntaxExtensions">
            <summary>
            A set of extension methods for syntax. These methods are dependent on the workspace layer.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSyntaxExtensions.Parenthesize(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean)">
            <summary>
            Creates parenthesized expression that is parenthesizing the specified expression.
            </summary>
            <param name="expression"></param>
            <param name="includeElasticTrivia">If true, add elastic trivia.</param>
            <param name="simplifiable">If true, attach <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation"/> to the parenthesized expression.</param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSyntaxExtensions.WithFormatterAnnotation``1(``0)">
            <summary>
            Creates a new node with the <see cref="P:Microsoft.CodeAnalysis.Formatting.Formatter.Annotation"/> attached.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSyntaxExtensions.WithSimplifierAnnotation``1(``0)">
            <summary>
            Creates a new node with the <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation"/> attached.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSyntaxExtensions.WithFormatterAnnotation(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Adds <see cref="P:Microsoft.CodeAnalysis.Formatting.Formatter.Annotation"/> to the specified token, creating a new token of the same type with the <see cref="P:Microsoft.CodeAnalysis.Formatting.Formatter.Annotation"/> on it.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSyntaxExtensions.WithSimplifierAnnotation(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Adds <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation"/> to the specified token, creating a new token of the same type with the <see cref="P:Microsoft.CodeAnalysis.Simplification.Simplifier.Annotation"/> on it.
            "Rename" annotation is specified by <see cref="F:Microsoft.CodeAnalysis.CodeActions.RenameAnnotation.Kind"/>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSyntaxExtensions.WithNavigationAnnotation(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Adds navigation annotation to the specified token, creating a new token of the same type with the navigation annotation on it.
            Navigation annotation allows to mark a token that should be selected after the code action is applied.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.CSharp.WorkspaceSyntaxExtensions.WithRenameAnnotation(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Adds "rename" annotation to the specified token, creating a new token of the same type with the "rename" annotation on it.
            "Rename" annotation is specified by <see cref="F:Microsoft.CodeAnalysis.CodeActions.RenameAnnotation.Kind"/>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:Roslynator.CSharp.SyntaxInverter">
            <summary>
            Provides static methods for syntax inversion.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInverter.LogicallyInvert(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns new expression that represents logical inversion of the specified expression.
            </summary>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxInverter.LogicallyInvert(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Returns new expression that represents logical inversion of the specified expression.
            </summary>
            <param name="expression"></param>
            <param name="semanticModel"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Roslynator.CSharp.SyntaxLogicalInverter">
            <summary>
            Provides static methods for syntax inversion.
            </summary>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxLogicalInverter.LogicallyInvert(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Returns new expression that represents logical inversion of the specified expression.
            </summary>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.CSharp.SyntaxLogicalInverter.LogicallyInvert(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken)">
            <summary>
            Returns new expression that represents logical inversion of the specified expression.
            </summary>
            <param name="expression"></param>
            <param name="semanticModel"></param>
            <param name="cancellationToken"></param>
        </member>
    </members>
</doc>
