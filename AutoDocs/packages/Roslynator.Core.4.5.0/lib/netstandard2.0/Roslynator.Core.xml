<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Roslynator.Core</name>
    </assembly>
    <members>
        <member name="T:Roslynator.ExtensionMethodSymbolInfo">
            <summary>
            Represents an extension method symbol.
            </summary>
        </member>
        <member name="P:Roslynator.ExtensionMethodSymbolInfo.ReducedSymbol">
            <summary>
            The definition of extension method from which this symbol was reduced, or null, if the symbol was not reduced.
            </summary>
        </member>
        <member name="P:Roslynator.ExtensionMethodSymbolInfo.Symbol">
            <summary>
            The extension method symbol.
            </summary>
        </member>
        <member name="P:Roslynator.ExtensionMethodSymbolInfo.ReducedSymbolOrSymbol">
            <summary>
            The reduced symbol or the symbol if the reduced symbol is null.
            </summary>
        </member>
        <member name="P:Roslynator.ExtensionMethodSymbolInfo.IsReduced">
            <summary>
            True if the symbol was reduced.
            </summary>
        </member>
        <member name="T:Roslynator.DiagnosticsExtensions">
            <summary>
            A set of extension methods for <see cref="T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext"/>, <see cref="T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext"/> and <see cref="T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext"/>.
            </summary>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxNode,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="node"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxToken,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="token"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxTrivia,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="trivia"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="additionalLocations"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="properties"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.ISymbol"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="additionalLocations"></param>
            <param name="properties"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxNode,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="node"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxToken,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="token"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxTrivia,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="trivia"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="additionalLocations"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="properties"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="additionalLocations"></param>
            <param name="properties"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxNode,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="node"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxToken,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="token"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxTrivia,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="trivia"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="additionalLocations"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="properties"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Roslynator.DiagnosticsExtensions.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])">
            <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> about a <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="context"></param>
            <param name="descriptor"></param>
            <param name="location"></param>
            <param name="additionalLocations"></param>
            <param name="properties"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="T:Roslynator.EnumExtensions">
            <summary>
            A set of extension methods for enumerations.
            </summary>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility)">
            <summary>
            Returns true if the accessibility is one of the specified accessibilities.
            </summary>
            <param name="accessibility"></param>
            <param name="accessibility1"></param>
            <param name="accessibility2"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility)">
            <summary>
            Returns true if the accessibility is one of the specified accessibilities.
            </summary>
            <param name="accessibility"></param>
            <param name="accessibility1"></param>
            <param name="accessibility2"></param>
            <param name="accessibility3"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility)">
            <summary>
            Returns true if the accessibility is one of the specified accessibilities.
            </summary>
            <param name="accessibility"></param>
            <param name="accessibility1"></param>
            <param name="accessibility2"></param>
            <param name="accessibility3"></param>
            <param name="accessibility4"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility)">
            <summary>
            Returns true if the accessibility is one of the specified accessibilities.
            </summary>
            <param name="accessibility"></param>
            <param name="accessibility1"></param>
            <param name="accessibility2"></param>
            <param name="accessibility3"></param>
            <param name="accessibility4"></param>
            <param name="accessibility5"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.IsMoreRestrictiveThan(Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Accessibility)">
            <summary>
            Returns true if the accessibility if more restrictive than the other accessibility.
            </summary>
            <param name="accessibility"></param>
            <param name="other"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind)">
            <summary>
            Returns true if the method kind is one of the specified method kinds.
            </summary>
            <param name="methodKind"></param>
            <param name="methodKind1"></param>
            <param name="methodKind2"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind)">
            <summary>
            Returns true if the method kind is one of the specified method kinds.
            </summary>
            <param name="methodKind"></param>
            <param name="methodKind1"></param>
            <param name="methodKind2"></param>
            <param name="methodKind3"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind)">
            <summary>
            Returns true if the method kind is one of the specified method kinds.
            </summary>
            <param name="methodKind"></param>
            <param name="methodKind1"></param>
            <param name="methodKind2"></param>
            <param name="methodKind3"></param>
            <param name="methodKind4"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind,Microsoft.CodeAnalysis.MethodKind)">
            <summary>
            Returns true if the method kind is one of the specified method kinds.
            </summary>
            <param name="methodKind"></param>
            <param name="methodKind1"></param>
            <param name="methodKind2"></param>
            <param name="methodKind3"></param>
            <param name="methodKind4"></param>
            <param name="methodKind5"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the special type is one of the specified special types.
            </summary>
            <param name="specialType"></param>
            <param name="specialType1"></param>
            <param name="specialType2"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the special type is one of the specified special types.
            </summary>
            <param name="specialType"></param>
            <param name="specialType1"></param>
            <param name="specialType2"></param>
            <param name="specialType3"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the special type is one of the specified special types.
            </summary>
            <param name="specialType"></param>
            <param name="specialType1"></param>
            <param name="specialType2"></param>
            <param name="specialType3"></param>
            <param name="specialType4"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the special type is one of the specified special types.
            </summary>
            <param name="specialType"></param>
            <param name="specialType1"></param>
            <param name="specialType2"></param>
            <param name="specialType3"></param>
            <param name="specialType4"></param>
            <param name="specialType5"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind)">
            <summary>
            Returns true if the type kind is one of the specified type kinds.
            </summary>
            <param name="typeKind"></param>
            <param name="typeKind1"></param>
            <param name="typeKind2"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind)">
            <summary>
            Returns true if the type kind is one of the specified type kinds.
            </summary>
            <param name="typeKind"></param>
            <param name="typeKind1"></param>
            <param name="typeKind2"></param>
            <param name="typeKind3"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind)">
            <summary>
            Returns true if the type kind is one of the specified type kinds.
            </summary>
            <param name="typeKind"></param>
            <param name="typeKind1"></param>
            <param name="typeKind2"></param>
            <param name="typeKind3"></param>
            <param name="typeKind4"></param>
        </member>
        <member name="M:Roslynator.EnumExtensions.Is(Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind,Microsoft.CodeAnalysis.TypeKind)">
            <summary>
            Returns true if the type kind is one of the specified type kinds.
            </summary>
            <param name="typeKind"></param>
            <param name="typeKind1"></param>
            <param name="typeKind2"></param>
            <param name="typeKind3"></param>
            <param name="typeKind4"></param>
            <param name="typeKind5"></param>
        </member>
        <member name="T:Roslynator.FileLinePositionSpanExtensions">
            <summary>
            A set of extension methods for <see cref="T:Microsoft.CodeAnalysis.FileLinePositionSpan"/>.
            </summary>
        </member>
        <member name="M:Roslynator.FileLinePositionSpanExtensions.StartLine(Microsoft.CodeAnalysis.FileLinePositionSpan)">
            <summary>
            Returns zero-based index of the start line of the specified span.
            </summary>
            <param name="fileLinePositionSpan"></param>
        </member>
        <member name="M:Roslynator.FileLinePositionSpanExtensions.EndLine(Microsoft.CodeAnalysis.FileLinePositionSpan)">
            <summary>
            Returns zero-based index of the end line of the specified span.
            </summary>
            <param name="fileLinePositionSpan"></param>
        </member>
        <member name="M:Roslynator.FileLinePositionSpanExtensions.IsMultiLine(Microsoft.CodeAnalysis.FileLinePositionSpan)">
            <summary>
            Returns true if the specified <see cref="T:Microsoft.CodeAnalysis.FileLinePositionSpan"/> spans over multiple lines.
            </summary>
            <param name="fileLinePositionSpan"></param>
        </member>
        <member name="M:Roslynator.FileLinePositionSpanExtensions.IsSingleLine(Microsoft.CodeAnalysis.FileLinePositionSpan)">
            <summary>
            Returns true if the specified <see cref="T:Microsoft.CodeAnalysis.FileLinePositionSpan"/> does not span over multiple lines.
            </summary>
            <param name="fileLinePositionSpan"></param>
        </member>
        <member name="T:Roslynator.SemanticModelExtensions">
            <summary>
            A set of extension methods for a <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/>.
            </summary>
        </member>
        <member name="M:Roslynator.SemanticModelExtensions.GetEnclosingNamedType(Microsoft.CodeAnalysis.SemanticModel,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the innermost named type symbol that the specified position is considered inside of.
            </summary>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.SemanticModelExtensions.GetEnclosingSymbol``1(Microsoft.CodeAnalysis.SemanticModel,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the innermost symbol of type <typeparamref name="TSymbol"/> that the specified position is considered inside of.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.SemanticModelExtensions.GetSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Returns what symbol, if any, the specified node bound to.
            </summary>
            <param name="semanticModel"></param>
            <param name="node"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.SemanticModelExtensions.GetTypeSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
            <summary>
            Returns type information about the specified node.
            </summary>
            <param name="semanticModel"></param>
            <param name="node"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.SemanticModelExtensions.GetTypeByMetadataName(Microsoft.CodeAnalysis.SemanticModel,System.String)">
            <summary>
            Returns the type within the compilation's assembly using its canonical CLR metadata name.
            </summary>
            <param name="semanticModel"></param>
            <param name="fullyQualifiedMetadataName"></param>
        </member>
        <member name="T:Roslynator.SymbolExtensions">
            <summary>
            A set of extension methods for <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> and its derived types.
            </summary>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ImplementsInterfaceMember(Microsoft.CodeAnalysis.ISymbol,System.Boolean)">
            <summary>
            Returns true if the symbol implements any interface member.
            </summary>
            <param name="symbol"></param>
            <param name="allInterfaces">If true, use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>, otherwise use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.</param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ImplementsInterfaceMember(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Returns true if the symbol implements any member of the specified interface.
            </summary>
            <param name="symbol"></param>
            <param name="interfaceSymbol"></param>
            <param name="allInterfaces">If true, use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>, otherwise use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.</param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ImplementsInterfaceMember``1(Microsoft.CodeAnalysis.ISymbol,System.Boolean)">
            <summary>
            Returns true if the symbol implements any interface member.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="symbol"></param>
            <param name="allInterfaces">If true, use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>, otherwise use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.</param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ImplementsInterfaceMember``1(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Returns true if the symbol implements any member of the specified interface.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="symbol"></param>
            <param name="interfaceSymbol"></param>
            <param name="allInterfaces">If true, use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>, otherwise use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.</param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsKind(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolKind)">
            <summary>
            Returns true if the symbol is the specified kind.
            </summary>
            <param name="symbol"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsKind(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind)">
            <summary>
            Returns true if the symbol is one of the specified kinds.
            </summary>
            <param name="symbol"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsKind(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind)">
            <summary>
            Returns true if the symbol is one of the specified kinds.
            </summary>
            <param name="symbol"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsKind(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind)">
            <summary>
            Returns true if the symbol is one of the specified kinds.
            </summary>
            <param name="symbol"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsKind(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind,Microsoft.CodeAnalysis.SymbolKind)">
            <summary>
            Returns true if the symbol is one of the specified kinds.
            </summary>
            <param name="symbol"></param>
            <param name="kind1"></param>
            <param name="kind2"></param>
            <param name="kind3"></param>
            <param name="kind4"></param>
            <param name="kind5"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsErrorType(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns true if the symbol represents an error.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsAsyncMethod(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns true if the symbol is an async method.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.GetAttribute(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Returns the attribute for the symbol that matches the specified attribute class, or null if the symbol does not have the specified attribute.
            </summary>
            <param name="symbol"></param>
            <param name="attributeClass"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.GetAttribute(Microsoft.CodeAnalysis.ISymbol,Roslynator.MetadataName@)">
            <summary>
            Returns the attribute for the symbol that matches the specified name, or null if the symbol does not have the specified attribute.
            </summary>
            <param name="symbol"></param>
            <param name="attributeName"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasAttribute(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Returns true if the symbol has the specified attribute.
            </summary>
            <param name="symbol"></param>
            <param name="attributeClass"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasAttribute(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Returns true if the type symbol has the specified attribute.
            </summary>
            <param name="typeSymbol"></param>
            <param name="attributeClass"></param>
            <param name="includeBaseTypes"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasAttribute(Microsoft.CodeAnalysis.ISymbol,Roslynator.MetadataName@)">
            <summary>
            Returns true if the symbol has attribute with the specified name.
            </summary>
            <param name="symbol"></param>
            <param name="attributeName"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasAttribute(Microsoft.CodeAnalysis.ITypeSymbol,Roslynator.MetadataName@,System.Boolean)">
            <summary>
            Returns true if the type symbol has attribute with the specified name.
            </summary>
            <param name="typeSymbol"></param>
            <param name="attributeName"></param>
            <param name="includeBaseTypes"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsPubliclyVisible(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Return true if the specified symbol is publicly visible.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasMetadataName(Microsoft.CodeAnalysis.ISymbol,Roslynator.MetadataName@)">
            <summary>
            Returns true if a symbol has the specified <see cref="T:Roslynator.MetadataName"/>.
            </summary>
            <param name="symbol"></param>
            <param name="metadataName"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Boolean)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Char)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.SByte)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Byte)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Int16)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.UInt16)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Int32)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.UInt32)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Int64)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.UInt64)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Decimal)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Single)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.Double)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.HasConstantValue(Microsoft.CodeAnalysis.IFieldSymbol,System.String)">
            <summary>
            Get a value indicating whether the field symbol has specified constant value.
            </summary>
            <param name="fieldSymbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ReducedFromOrSelf(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            If this method is a reduced extension method, returns the definition of extension method from which this was reduced. Otherwise, returns this symbol.
            </summary>
            <param name="methodSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsReducedExtensionMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Returns true if this method is a reduced extension method.
            </summary>
            <param name="methodSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsOrdinaryExtensionMethod(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Returns true if this method is an ordinary extension method (i.e. "this" parameter has not been removed).
            </summary>
            <param name="methodSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsParameterArrayOf(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the parameter was declared as a parameter array that has a specified element type.
            </summary>
            <param name="parameterSymbol"></param>
            <param name="elementType"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsParameterArrayOf(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the parameter was declared as a parameter array that has one of specified element types.
            </summary>
            <param name="parameterSymbol"></param>
            <param name="elementType1"></param>
            <param name="elementType2"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsParameterArrayOf(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the parameter was declared as a parameter array that has one of specified element types.
            </summary>
            <param name="parameterSymbol"></param>
            <param name="elementType1"></param>
            <param name="elementType2"></param>
            <param name="elementType3"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsRefOrOut(Microsoft.CodeAnalysis.IParameterSymbol)">
            <summary>
            Returns true if the parameter was declared as "ref" or "out" parameter.
            </summary>
            <param name="parameterSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsNullableOf(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the type is <see cref="T:System.Nullable`1"/> and it has specified type argument.
            </summary>
            <param name="namedTypeSymbol"></param>
            <param name="specialType"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsNullableOf(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is <see cref="T:System.Nullable`1"/> and it has specified type argument.
            </summary>
            <param name="namedTypeSymbol"></param>
            <param name="typeArgument"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.FindMember``1(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Searches for a member that matches the conditions defined by the specified predicate and returns the first occurrence within the type's members.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="typeSymbol"></param>
            <param name="predicate"></param>
            <param name="includeBaseTypes"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.FindMember``1(Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Searches for a member that has the specified name and matches the conditions defined by the specified predicate, if any, and returns the first occurrence within the type's members.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="typeSymbol"></param>
            <param name="name"></param>
            <param name="predicate"></param>
            <param name="includeBaseTypes"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.FindTypeMember(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Func{Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean},System.Boolean)">
            <summary>
            Searches for a type member that matches the conditions defined by the specified predicate and returns the first occurrence within the type's members.
            </summary>
            <param name="typeSymbol"></param>
            <param name="predicate"></param>
            <param name="includeBaseTypes"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.FindTypeMember(Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,System.Func{Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean},System.Boolean)">
            <summary>
            Searches for a type member that has the specified name and matches the conditions defined by the specified predicate, if any, and returns the first occurrence within the type's members.
            </summary>
            <param name="typeSymbol"></param>
            <param name="name"></param>
            <param name="predicate"></param>
            <param name="includeBaseTypes"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.FindTypeMember(Microsoft.CodeAnalysis.INamedTypeSymbol,System.String,System.Int32,System.Func{Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean},System.Boolean)">
            <summary>
            Searches for a type member that has the specified name, arity and matches the conditions defined by the specified predicate, if any, and returns the first occurrence within the type's members.
            </summary>
            <param name="typeSymbol"></param>
            <param name="name"></param>
            <param name="arity"></param>
            <param name="predicate"></param>
            <param name="includeBaseTypes"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsNullableOf(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SpecialType)">
            <summary>
            Returns true if the type is <see cref="T:System.Nullable`1"/> and it has specified type argument.
            </summary>
            <param name="typeSymbol"></param>
            <param name="specialType"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsNullableOf(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is <see cref="T:System.Nullable`1"/> and it has specified type argument.
            </summary>
            <param name="typeSymbol"></param>
            <param name="typeArgument"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsVoid(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is <see cref="T:System.Void"/>.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsString(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is <see cref="T:System.String"/>.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsObject(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is <see cref="T:System.Object"/>.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.BaseTypes(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Gets a list of base types of this type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.BaseTypesAndSelf(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Gets a list of base types of this type (including this type).
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.Implements(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SpecialType,System.Boolean)">
            <summary>
            Returns true if the type implements specified interface.
            </summary>
            <param name="typeSymbol"></param>
            <param name="interfaceType"></param>
            <param name="allInterfaces">If true, use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>, otherwise use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.</param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ImplementsAny(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,System.Boolean)">
            <summary>
            Returns true if the type implements any of specified interfaces.
            </summary>
            <param name="typeSymbol"></param>
            <param name="interfaceType1"></param>
            <param name="interfaceType2"></param>
            <param name="allInterfaces">If true, use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>, otherwise use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.</param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ImplementsAny(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,Microsoft.CodeAnalysis.SpecialType,System.Boolean)">
            <summary>
            Returns true if the type implements any of specified interfaces.
            </summary>
            <param name="typeSymbol"></param>
            <param name="interfaceType1"></param>
            <param name="interfaceType2"></param>
            <param name="interfaceType3"></param>
            <param name="allInterfaces">If true, use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>, otherwise use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.</param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.Implements(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Returns true if the type implements specified interface.
            </summary>
            <param name="typeSymbol"></param>
            <param name="interfaceSymbol"></param>
            <param name="allInterfaces">If true, use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces"/>, otherwise use <see cref="P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces"/>.</param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.Implements(Microsoft.CodeAnalysis.ITypeSymbol,Roslynator.MetadataName@,System.Boolean)">
            <summary>
            Returns true if the type implements specified interface name.
            </summary>
            <param name="typeSymbol"></param>
            <param name="interfaceName"></param>
            <param name="allInterfaces"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.SupportsExplicitDeclaration(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type can be declared explicitly in a source code.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.InheritsFrom(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean)">
            <summary>
            Returns true if the type inherits from a specified base type.
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <param name="includeInterfaces"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.InheritsFrom(Microsoft.CodeAnalysis.ITypeSymbol,Roslynator.MetadataName@,System.Boolean)">
            <summary>
            Returns true if the type inherits from a type with the specified name.
            </summary>
            <param name="type"></param>
            <param name="baseTypeName"></param>
            <param name="includeInterfaces"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.EqualsOrInheritsFrom(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean)">
            <summary>
            Returns true if the type is equal or inherits from a specified base type.
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <param name="includeInterfaces"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.EqualsOrInheritsFrom(Microsoft.CodeAnalysis.ITypeSymbol,Roslynator.MetadataName@,System.Boolean)">
            <summary>
            Returns true if the type is equal or inherits from a type with the specified name.
            </summary>
            <param name="type"></param>
            <param name="baseTypeName"></param>
            <param name="includeInterfaces"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.FindMember``1(Microsoft.CodeAnalysis.ITypeSymbol,System.Func{``0,System.Boolean})">
            <summary>
            Searches for a member that matches the conditions defined by the specified predicate, if any, and returns the first occurrence within the type's members.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="typeSymbol"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.FindMember``1(Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Func{``0,System.Boolean})">
            <summary>
            Searches for a member that has the specified name and matches the conditions defined by the specified predicate, if any, and returns the first occurrence within the type's members.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="typeSymbol"></param>
            <param name="name"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ContainsMember``1(Microsoft.CodeAnalysis.ITypeSymbol,System.Func{``0,System.Boolean})">
            <summary>
            Returns true if the type contains member that matches the conditions defined by the specified predicate, if any.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="typeSymbol"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.ContainsMember``1(Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Func{``0,System.Boolean})">
            <summary>
            Returns true if the type contains member that has the specified name and matches the conditions defined by the specified predicate, if any.
            </summary>
            <typeparam name="TSymbol"></typeparam>
            <param name="typeSymbol"></param>
            <param name="name"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsIEnumerableOfT(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsIEnumerableOrIEnumerableOfT(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsReferenceTypeOrNullableType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is a reference type or a nullable type.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="M:Roslynator.SymbolExtensions.IsNullableType(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is a nullable type.
            </summary>
            <param name="typeSymbol"></param>
        </member>
        <member name="T:Roslynator.SyntaxExtensions">
            <summary>
            A set of extension method for a syntax.
            </summary>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.ReplaceAt``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Int32,``0)">
            <summary>
            Creates a new list with a node at the specified index replaced with a new node.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <param name="newNode"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.IsFirst``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},``0)">
            <summary>
            Returns true if the specified node is a first node in the list.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.IsLast``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},``0)">
            <summary>
            Returns true if the specified node is a last node in the list.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.Any``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if any node in a list matches the predicate.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.All``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if all nodes in a list matches the predicate.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.Contains``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},``0)">
            <summary>
            Returns true if the specified node is in the <see cref="T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithTriviaFrom``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new separated list with both leading and trailing trivia of the specified node.
            If the list contains more than one item, first item is updated with leading trivia and last item is updated with trailing trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.GetTrailingSeparator``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0})">
            <summary>
            Returns the trailing separator, if any.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.HasTrailingSeparator``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0})">
            <summary>
            Returns true if the specified list contains trailing separator.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.ReplaceAt``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Int32,``0)">
            <summary>
            Creates a new list with the node at the specified index replaced with a new node.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <param name="newNode"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.IsFirst``1(Microsoft.CodeAnalysis.SyntaxList{``0},``0)">
            <summary>
            Returns true if the specified node is a first node in the list.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.IsLast``1(Microsoft.CodeAnalysis.SyntaxList{``0},``0)">
            <summary>
            Returns true if the specified node is a last node in the list.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.Any``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if any node in a list matches the predicate.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.All``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if all nodes in a list matches the predicate.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.Contains``1(Microsoft.CodeAnalysis.SyntaxList{``0},``0)">
            <summary>
            Returns true if the specified node is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithTriviaFrom``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new list with both leading and trailing trivia of the specified node.
            If the list contains more than one item, first item is updated with leading trivia and last item is updated with trailing trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.DescendantTrivia``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Get a list of all the trivia associated with the nodes in the list.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="descendIntoChildren"></param>
            <param name="descendIntoTrivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.DescendantTrivia``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Get a list of all the trivia associated with the nodes in the list.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="list"></param>
            <param name="span"></param>
            <param name="descendIntoChildren"></param>
            <param name="descendIntoTrivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.GetLeadingAndTrailingTrivia(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns leading and trailing trivia of the specified node in a single list.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.PrependToLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new node from this node with the leading trivia replaced with a new trivia where the specified trivia is inserted at the beginning of the leading trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.PrependToLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new node from this node with the leading trivia replaced with a new trivia where the specified trivia is inserted at the beginning of the leading trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.PrependToTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new node from this node with the trailing trivia replaced with a new trivia where the specified trivia is inserted at the beginning of the trailing trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.PrependToTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new node from this node with the trailing trivia replaced with a new trivia where the specified trivia is inserted at the beginning of the trailing trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.AppendToLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new node from this node with the leading trivia replaced with a new trivia where the specified trivia is added at the end of the leading trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.AppendToLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new node from this node with the leading trivia replaced with a new trivia where the specified trivia is added at the end of the leading trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.AppendToTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new node from this node with the trailing trivia replaced with a new trivia where the specified trivia is added at the end of the trailing trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.AppendToTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new node from this node with the trailing trivia replaced with a new trivia where the specified trivia is added at the end of the trailing trivia.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.SpanContainsDirectives(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns true if the node's span contains any preprocessor directives.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.ContainsDirectives(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Returns true if the node contains any preprocessor directives inside the specified span.
            </summary>
            <param name="node"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithTriviaFrom``1(``0,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new node from this node with both the leading and trailing trivia of the specified token.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.FirstAncestor``1(Microsoft.CodeAnalysis.SyntaxNode,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Returns the first node of type <typeparamref name="TNode"/> that matches the predicate.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="predicate"></param>
            <param name="ascendOutOfTrivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.FirstDescendant``1(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Searches a list of descendant nodes in prefix document order and returns first descendant of type <typeparamref name="TNode"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="descendIntoChildren"></param>
            <param name="descendIntoTrivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.FirstDescendant``1(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Searches a list of descendant nodes in prefix document order and returns first descendant of type <typeparamref name="TNode"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="span"></param>
            <param name="descendIntoChildren"></param>
            <param name="descendIntoTrivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.FirstDescendantOrSelf``1(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Searches a list of descendant nodes (including this node) in prefix document order and returns first descendant of type <typeparamref name="TNode"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="descendIntoChildren"></param>
            <param name="descendIntoTrivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.FirstDescendantOrSelf``1(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Searches a list of descendant nodes (including this node) in prefix document order and returns first descendant of type <typeparamref name="TNode"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="span"></param>
            <param name="descendIntoChildren"></param>
            <param name="descendIntoTrivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithoutTrivia(Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrToken"/> from this node without leading and trailing trivia.
            </summary>
            <param name="nodeOrToken"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithoutLeadingTrivia(Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrToken"/> with the leading trivia removed.
            </summary>
            <param name="nodeOrToken"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithoutTrailingTrivia(Microsoft.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrToken"/> with the trailing trivia removed.
            </summary>
            <param name="nodeOrToken"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.PrependToLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new token from this token with the leading trivia replaced with a new trivia where the specified trivia is inserted at the beginning of the leading trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.PrependToLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new token from this token with the leading trivia replaced with a new trivia where the specified trivia is inserted at the beginning of the leading trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.PrependToTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new token from this token with the trailing trivia replaced with a new trivia where the specified trivia is inserted at the beginning of the trailing trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.PrependToTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new token from this token with the trailing trivia replaced with a new trivia where the specified trivia is inserted at the beginning of the trailing trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.AppendToTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new token from this token with the trailing trivia replaced with a new trivia where the specified trivia is added at the end of the trailing trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.AppendToTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new token from this token with the trailing trivia replaced with a new trivia where the specified trivia is added at the end of the trailing trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.AppendToLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new token from this token with the leading trivia replaced with a new trivia where the specified trivia is added at the end of the leading trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.AppendToLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new token from this token with the leading trivia replaced with a new trivia where the specified trivia is added at the end of the leading trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.LeadingAndTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Returns leading and trailing trivia of the specified node in a single list.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithoutLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new token from this token with the leading trivia removed.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithoutTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new token from this token with the trailing trivia removed.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.WithTriviaFrom(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Creates a new token from this token with both the leading and trailing trivia of the specified node.
            </summary>
            <param name="token"></param>
            <param name="node"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.ReplaceAt(Microsoft.CodeAnalysis.SyntaxTokenList,System.Int32,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/> with a token at the specified index replaced with a new token.
            </summary>
            <param name="tokenList"></param>
            <param name="index"></param>
            <param name="newToken"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList,System.Func{Microsoft.CodeAnalysis.SyntaxToken,System.Boolean})">
            <summary>
            Returns true if any token in a <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/> matches the predicate.
            </summary>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.All(Microsoft.CodeAnalysis.SyntaxTokenList,System.Func{Microsoft.CodeAnalysis.SyntaxToken,System.Boolean})">
            <summary>
            Returns true if all tokens in a <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/> matches the predicate.
            </summary>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.Contains(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Returns true if the specified token is in the <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/>.
            </summary>
            <param name="tokens"></param>
            <param name="token"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTokenList,System.Func{Microsoft.CodeAnalysis.SyntaxToken,System.Boolean})">
            <summary>
            Searches for a token that matches the predicate and returns the zero-based index of the first occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SyntaxTokenList"/>.
            </summary>
            <param name="tokens"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.TryGetContainingList(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTriviaList@,System.Boolean,System.Boolean)">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.SyntaxTriviaList"/> the specified trivia is contained in.
            </summary>
            <param name="trivia"></param>
            <param name="triviaList"></param>
            <param name="allowLeading">If true, trivia can be part of leading trivia.</param>
            <param name="allowTrailing">If true, trivia can be part of trailing trivia.</param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.ReplaceAt(Microsoft.CodeAnalysis.SyntaxTriviaList,System.Int32,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.SyntaxTriviaList"/> with a trivia at the specified index replaced with new trivia.
            </summary>
            <param name="triviaList"></param>
            <param name="index"></param>
            <param name="newTrivia"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})">
            <summary>
            Returns true if any trivia in a <see cref="T:Microsoft.CodeAnalysis.SyntaxTriviaList"/> matches the predicate.
            </summary>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.All(Microsoft.CodeAnalysis.SyntaxTriviaList,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})">
            <summary>
            Returns true if all trivia in a <see cref="T:Microsoft.CodeAnalysis.SyntaxTriviaList"/> matches the predicate.
            </summary>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Roslynator.SyntaxExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTriviaList,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})">
            <summary>
            Searches for a trivia that matches the predicate and returns the zero-based index of the first occurrence within the entire <see cref="T:Microsoft.CodeAnalysis.SyntaxTriviaList"/>.
            </summary>
            <param name="triviaList"></param>
            <param name="predicate"></param>
        </member>
        <member name="T:Roslynator.SyntaxTreeExtensions">
            <summary>
            A set of extension methods for <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
        </member>
        <member name="M:Roslynator.SyntaxTreeExtensions.GetStartLine(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Returns zero-based index of the start line of the specified span.
            </summary>
            <param name="syntaxTree"></param>
            <param name="span"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.SyntaxTreeExtensions.GetEndLine(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Returns zero-based index of the end line of the specified span.
            </summary>
            <param name="syntaxTree"></param>
            <param name="span"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.SyntaxTreeExtensions.IsMultiLineSpan(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Returns true if the specified <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> spans over multiple lines.
            </summary>
            <param name="syntaxTree"></param>
            <param name="span"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.SyntaxTreeExtensions.IsSingleLineSpan(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Returns true if the specified <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/> does not span over multiple lines.
            </summary>
            <param name="syntaxTree"></param>
            <param name="span"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Roslynator.FlagsUtility`1">
            <summary>
            Provides methods to analyze numeric value that acts like a set of flags.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Roslynator.FlagsUtility`1.Instance">
            <summary>
            Gets an instance for a concrete type.
            </summary>
        </member>
        <member name="P:Roslynator.FlagsUtility`1.FlagCount">
            <summary>
            Gets a maximal number of flags a <typeparamref name="T"/> can store.
            </summary>
        </member>
        <member name="P:Roslynator.FlagsUtility`1.MaxValue">
            <summary>
            Gets a maximal value that <typeparamref name="T"/> can store.
            </summary>
        </member>
        <member name="M:Roslynator.FlagsUtility`1.IsZeroOrPowerOfTwo(`0)">
            <summary>
            Returns true if the specified value is zero or power of two.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.FlagsUtility`1.IsPowerOfTwo(`0)">
            <summary>
            Returns true if the specified value is power of two.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.FlagsUtility`1.IsComposite(`0)">
            <summary>
            Returns true if the multiple bits are set in the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Roslynator.FlagsUtility`1.Combine(System.Collections.Immutable.ImmutableArray{`0})">
            <summary>
            Returns composed value if the specified value can be composed into a single value.
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Roslynator.ISelection`1">
            <summary>
            Represents consecutive sequence of selected items in a collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Roslynator.ISelection`1.FirstIndex">
            <summary>
            Gets an index of the first selected item.
            </summary>
        </member>
        <member name="P:Roslynator.ISelection`1.LastIndex">
            <summary>
            Gets an index of the last selected item.
            </summary>
        </member>
        <member name="M:Roslynator.ISelection`1.First">
            <summary>
            Gets the first selected item.
            </summary>
        </member>
        <member name="M:Roslynator.ISelection`1.Last">
            <summary>
            Gets the last selected item.
            </summary>
        </member>
        <member name="T:Roslynator.MetadataName">
            <summary>
            Represents fully qualified metadata name of a symbol.
            </summary>
        </member>
        <member name="M:Roslynator.MetadataName.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Roslynator.MetadataName"/>.
            </summary>
            <param name="containingNamespaces"></param>
            <param name="name"></param>
        </member>
        <member name="M:Roslynator.MetadataName.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Roslynator.MetadataName"/>.
            </summary>
            <param name="containingNamespaces"></param>
            <param name="containingTypes"></param>
            <param name="name"></param>
        </member>
        <member name="M:Roslynator.MetadataName.#ctor(System.Collections.Immutable.ImmutableArray{System.String},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Roslynator.MetadataName"/>.
            </summary>
            <param name="containingNamespaces"></param>
            <param name="name"></param>
        </member>
        <member name="M:Roslynator.MetadataName.#ctor(System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{System.String},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Roslynator.MetadataName"/>.
            </summary>
            <param name="containingNamespaces"></param>
            <param name="containingTypes"></param>
            <param name="name"></param>
        </member>
        <member name="P:Roslynator.MetadataName.ContainingNamespaces">
            <summary>
            Gets metadata names of containing namespaces
            </summary>
        </member>
        <member name="P:Roslynator.MetadataName.ContainingTypes">
            <summary>
            Get metadata names of containing types.
            </summary>
        </member>
        <member name="P:Roslynator.MetadataName.Name">
            <summary>
            Get metadata name.
            </summary>
        </member>
        <member name="P:Roslynator.MetadataName.IsDefault">
            <summary>
            Determines whether this struct was initialized with an actual names.
            </summary>
        </member>
        <member name="M:Roslynator.MetadataName.ToString">
            <summary>
            Returns the fully qualified metadata name.
            </summary>
        </member>
        <member name="M:Roslynator.MetadataName.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
        </member>
        <member name="M:Roslynator.MetadataName.Equals(Roslynator.MetadataName)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Roslynator.MetadataName"/> are equal.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Roslynator.MetadataName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Roslynator.MetadataName.Parse(System.String)">
            <summary>
            Converts the string representation of a fully qualified metadata name to its <see cref="T:Roslynator.MetadataName"/> equivalent.
            </summary>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is empty or invalid.</exception>
        </member>
        <member name="M:Roslynator.MetadataName.TryParse(System.String,Roslynator.MetadataName@)">
            <summary>
            Converts the string representation of a fully qualified metadata name to its <see cref="T:Roslynator.MetadataName"/> equivalent.
            A return value indicates whether the parsing succeeded.
            </summary>
            <param name="name"></param>
            <param name="metadataName"></param>
        </member>
        <member name="T:Roslynator.MetadataNameEqualityComparer`1">
            <summary>
            Provides equality comparison for <typeparamref name="TSymbol"/> by comparing <see cref="P:Microsoft.CodeAnalysis.ISymbol.MetadataName"/>,
            metadata name of <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingType"/>(s) and metadata name of <see cref="P:Microsoft.CodeAnalysis.ISymbol.ContainingNamespace"/>(s).
            </summary>
            <typeparam name="TSymbol"></typeparam>
        </member>
        <member name="P:Roslynator.MetadataNameEqualityComparer`1.Instance">
            <summary>
            Get the instance of <see cref="T:Roslynator.MetadataNameEqualityComparer`1"/> for the specified <typeparamref name="TSymbol"/>.
            </summary>
        </member>
        <member name="M:Roslynator.MetadataNameEqualityComparer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type <typeparamref name="TSymbol" /> are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.MetadataNameEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Serves as a hash function for the specified symbol.
            </summary>
            <param name="obj">The symbol for which to get a hash code.</param>
            <returns>A hash code for the specified symbol.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Roslynator.NameGenerator">
            <summary>
            Provides methods to obtain an unique identifier.
            </summary>
        </member>
        <member name="P:Roslynator.NameGenerator.Default">
            <summary>
            Default implementation of <see cref="T:Roslynator.NameGenerator"/> that adds number suffix to ensure uniqueness.
            </summary>
        </member>
        <member name="M:Roslynator.NameGenerator.EnsureUniqueName(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns an unique name using the specified list of reserved names.
            </summary>
            <param name="baseName"></param>
            <param name="reservedNames"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.EnsureUniqueName(System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol},System.Boolean)">
            <summary>
            Returns an unique name using the specified list of symbols.
            </summary>
            <param name="baseName"></param>
            <param name="symbols"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.EnsureUniqueName(System.String,Microsoft.CodeAnalysis.SemanticModel,System.Int32,System.Boolean)">
            <summary>
            Returns a name that will be unique at the specified position.
            </summary>
            <param name="baseName"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.EnsureUniqueEnumMemberName(System.String,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Returns unique enum member name for a specified enum type.
            </summary>
            <param name="baseName"></param>
            <param name="enumType"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.EnsureUniqueLocalName(System.String,Microsoft.CodeAnalysis.SemanticModel,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return a local name that will be unique at the specified position.
            </summary>
            <param name="baseName"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="isCaseSensitive"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.EnsureUniqueLocalNames(System.String,Microsoft.CodeAnalysis.SemanticModel,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return a local names that will be unique at the specified position.
            </summary>
            <param name="baseName"></param>
            <param name="semanticModel"></param>
            <param name="position"></param>
            <param name="count"></param>
            <param name="isCaseSensitive"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.EnsureUniqueParameterName(System.String,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Return a parameter name that will be unique at the specified position.
            </summary>
            <param name="baseName"></param>
            <param name="containingSymbol"></param>
            <param name="semanticModel"></param>
            <param name="isCaseSensitive"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.IsUniqueName(System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol},System.Boolean)">
            <summary>
            Returns true if the name is not contained in the specified list. <see cref="P:Microsoft.CodeAnalysis.ISymbol.Name"/> is used to compare names.
            </summary>
            <param name="name"></param>
            <param name="symbols"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.IsUniqueName(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns true if the name is not contained in the specified list.
            </summary>
            <param name="name"></param>
            <param name="reservedNames"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Roslynator.NameGenerator.CreateName(Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean)">
            <summary>
            Creates a syntax identifier from the specified type symbol.
            </summary>
            <param name="typeSymbol"></param>
            <param name="firstCharToLower"></param>
        </member>
        <member name="T:Roslynator.SeparatedSyntaxListSelection`1">
            <summary>
            Represents selected nodes in a <see cref="T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Roslynator.SeparatedSyntaxListSelection`1.#ctor(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.Text.TextSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslynator.SeparatedSyntaxListSelection`1"/>.
            </summary>
            <param name="list"></param>
            <param name="span"></param>
            <param name="firstIndex"></param>
            <param name="lastIndex"></param>
        </member>
        <member name="P:Roslynator.SeparatedSyntaxListSelection`1.UnderlyingList">
            <summary>
            Gets an underlying list that contains selected nodes.
            </summary>
        </member>
        <member name="P:Roslynator.SeparatedSyntaxListSelection`1.OriginalSpan">
            <summary>
            Gets the original span that was used to determine selected nodes.
            </summary>
        </member>
        <member name="P:Roslynator.SeparatedSyntaxListSelection`1.FirstIndex">
            <summary>
            Gets an index of the first selected node.
            </summary>
        </member>
        <member name="P:Roslynator.SeparatedSyntaxListSelection`1.LastIndex">
            <summary>
            Gets an index of the last selected node.
            </summary>
        </member>
        <member name="P:Roslynator.SeparatedSyntaxListSelection`1.Count">
            <summary>
            Gets a number of selected nodes.
            </summary>
        </member>
        <member name="P:Roslynator.SeparatedSyntaxListSelection`1.Item(System.Int32)">
            <summary>
            Gets the selected node at the specified index.
            </summary>
            <returns>The node at the specified index.</returns>
            <param name="index">The zero-based index of the node to get. </param>
        </member>
        <member name="M:Roslynator.SeparatedSyntaxListSelection`1.First">
            <summary>
            Gets the first selected node.
            </summary>
        </member>
        <member name="M:Roslynator.SeparatedSyntaxListSelection`1.Last">
            <summary>
            Gets the last selected node.
            </summary>
        </member>
        <member name="M:Roslynator.SeparatedSyntaxListSelection`1.Create(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.SeparatedSyntaxListSelection`1"/> based on the specified list and span.
            </summary>
            <param name="list"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.SeparatedSyntaxListSelection`1.TryCreate(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.SeparatedSyntaxListSelection{`0}@)">
            <summary>
            Creates a new <see cref="T:Roslynator.SeparatedSyntaxListSelection`1"/> based on the specified list and span.
            </summary>
            <param name="list"></param>
            <param name="span"></param>
            <param name="selection"></param>
            <returns>True if the specified span contains at least one node; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.SeparatedSyntaxListSelection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through selected nodes.
            </summary>
        </member>
        <member name="T:Roslynator.SyntaxListSelection`1">
            <summary>
            Represents selected nodes in a <see cref="T:Microsoft.CodeAnalysis.SyntaxList`1"/>.
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Roslynator.SyntaxListSelection`1.#ctor(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.Text.TextSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslynator.SyntaxListSelection`1"/>.
            </summary>
            <param name="list"></param>
            <param name="span"></param>
            <param name="firstIndex"></param>
            <param name="lastIndex"></param>
        </member>
        <member name="P:Roslynator.SyntaxListSelection`1.UnderlyingList">
            <summary>
            Gets an underlying list that contains selected nodes.
            </summary>
        </member>
        <member name="P:Roslynator.SyntaxListSelection`1.OriginalSpan">
            <summary>
            Gets the original span that was used to determine selected nodes.
            </summary>
        </member>
        <member name="P:Roslynator.SyntaxListSelection`1.FirstIndex">
            <summary>
            Gets an index of the first selected node.
            </summary>
        </member>
        <member name="P:Roslynator.SyntaxListSelection`1.LastIndex">
            <summary>
            Gets an index of the last selected node.
            </summary>
        </member>
        <member name="P:Roslynator.SyntaxListSelection`1.Count">
            <summary>
            Gets a number of selected nodes.
            </summary>
        </member>
        <member name="P:Roslynator.SyntaxListSelection`1.Item(System.Int32)">
            <summary>
            Gets the selected node at the specified index.
            </summary>
            <returns>The node at the specified index.</returns>
            <param name="index">The zero-based index of the node to get. </param>
        </member>
        <member name="M:Roslynator.SyntaxListSelection`1.First">
            <summary>
            Gets the first selected node.
            </summary>
        </member>
        <member name="M:Roslynator.SyntaxListSelection`1.Last">
            <summary>
            Gets the last selected node.
            </summary>
        </member>
        <member name="M:Roslynator.SyntaxListSelection`1.Create(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.SyntaxListSelection`1"/> based on the specified list and span.
            </summary>
            <param name="list"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.SyntaxListSelection`1.TryCreate(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.SyntaxListSelection{`0}@)">
            <summary>
            Creates a new <see cref="T:Roslynator.SyntaxListSelection`1"/> based on the specified list and span.
            </summary>
            <param name="list"></param>
            <param name="span"></param>
            <param name="selection"></param>
            <returns>True if the specified span contains at least one node; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.SyntaxListSelection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through selected nodes.
            </summary>
        </member>
        <member name="T:Roslynator.Text.TextLineCollectionSelection">
            <summary>
            Represents selected lines in a <see cref="T:Microsoft.CodeAnalysis.Text.TextLineCollection"/>.
            </summary>
        </member>
        <member name="M:Roslynator.Text.TextLineCollectionSelection.#ctor(Microsoft.CodeAnalysis.Text.TextLineCollection,Microsoft.CodeAnalysis.Text.TextSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Roslynator.Text.TextLineCollectionSelection"/>.
            </summary>
            <param name="lines"></param>
            <param name="span"></param>
            <param name="firstIndex"></param>
            <param name="lastIndex"></param>
        </member>
        <member name="P:Roslynator.Text.TextLineCollectionSelection.UnderlyingLines">
            <summary>
            Gets an underlying collection that contains selected lines.
            </summary>
        </member>
        <member name="P:Roslynator.Text.TextLineCollectionSelection.OriginalSpan">
            <summary>
            Gets the original span that was used to determine selected lines.
            </summary>
        </member>
        <member name="P:Roslynator.Text.TextLineCollectionSelection.FirstIndex">
            <summary>
            Gets an index of the first selected line.
            </summary>
        </member>
        <member name="P:Roslynator.Text.TextLineCollectionSelection.LastIndex">
            <summary>
            Gets an index of the last selected line.
            </summary>
        </member>
        <member name="P:Roslynator.Text.TextLineCollectionSelection.Count">
            <summary>
            Gets a number of selected lines.
            </summary>
        </member>
        <member name="P:Roslynator.Text.TextLineCollectionSelection.Item(System.Int32)">
            <summary>
            Gets the selected line at the specified index.
            </summary>
            <returns>The line at the specified index.</returns>
            <param name="index">The zero-based index of the line to get. </param>
        </member>
        <member name="M:Roslynator.Text.TextLineCollectionSelection.First">
            <summary>
            Gets the first selected line.
            </summary>
        </member>
        <member name="M:Roslynator.Text.TextLineCollectionSelection.Last">
            <summary>
            Gets the last selected line.
            </summary>
        </member>
        <member name="M:Roslynator.Text.TextLineCollectionSelection.Create(Microsoft.CodeAnalysis.Text.TextLineCollection,Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            Creates a new <see cref="T:Roslynator.Text.TextLineCollectionSelection"/> based on the specified list and span.
            </summary>
            <param name="lines"></param>
            <param name="span"></param>
        </member>
        <member name="M:Roslynator.Text.TextLineCollectionSelection.TryCreate(Microsoft.CodeAnalysis.Text.TextLineCollection,Microsoft.CodeAnalysis.Text.TextSpan,Roslynator.Text.TextLineCollectionSelection@)">
            <summary>
            Creates a new <see cref="T:Roslynator.Text.TextLineCollectionSelection"/> based on the specified list and span.
            </summary>
            <param name="lines"></param>
            <param name="span"></param>
            <param name="selectedLines"></param>
            <returns>True if the specified span contains at least one line; otherwise, false.</returns>
        </member>
        <member name="M:Roslynator.Text.TextLineCollectionSelection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through selected lines.
            </summary>
        </member>
        <member name="T:Roslynator.Visibility">
            <summary>
            Specifies visibility of a symbol.
            </summary>
        </member>
        <member name="F:Roslynator.Visibility.NotApplicable">
            <summary>
            No visibility specified.
            </summary>
        </member>
        <member name="F:Roslynator.Visibility.Private">
            <summary>
            Symbol is privately visible.
            </summary>
        </member>
        <member name="F:Roslynator.Visibility.Internal">
            <summary>
            Symbol is internally visible.
            </summary>
        </member>
        <member name="F:Roslynator.Visibility.Public">
            <summary>
            Symbol is publicly visible.
            </summary>
        </member>
        <member name="F:Roslynator.WellKnownDiagnosticIdPrefixes.SA">
            <summary>
            StyleCop prefix.
            </summary>
        </member>
        <member name="F:Roslynator.WellKnownDiagnosticIdPrefixes.SX">
            <summary>
            StyleCop prefix.
            </summary>
        </member>
    </members>
</doc>
